
challenge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000194  2**0
                  ALLOC
  2 .stab         0000036c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006aa  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int number = 0;
int main()
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/* Intializing App. */
	DDRC = DDRC | (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);// Ouput -> 1.
  84:	a4 e3       	ldi	r26, 0x34	; 52
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 60       	ori	r24, 0x0F	; 15
  90:	8c 93       	st	X, r24
	//Interrupt Switch.


	//Interrupt Pin.
	GICR = GICR | ( 1 << INT2);
  92:	ab e5       	ldi	r26, 0x5B	; 91
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	eb e5       	ldi	r30, 0x5B	; 91
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	8c 93       	st	X, r24
	MCUCSR = MCUCSR | (1<<ISC2);
  a0:	a4 e5       	ldi	r26, 0x54	; 84
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e4 e5       	ldi	r30, 0x54	; 84
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24


	sei();//SFR (I-BIT).
  ae:	78 94       	sei
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x34>

000000b2 <__vector_18>:

}


ISR(INT2_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62

	if ( number >= 9 ) number = 0;
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	90 91 61 00 	lds	r25, 0x0061
  d4:	89 30       	cpi	r24, 0x09	; 9
  d6:	91 05       	cpc	r25, r1
  d8:	2c f0       	brlt	.+10     	; 0xe4 <__vector_18+0x32>
  da:	10 92 61 00 	sts	0x0061, r1
  de:	10 92 60 00 	sts	0x0060, r1
  e2:	09 c0       	rjmp	.+18     	; 0xf6 <__vector_18+0x44>
	else number++;
  e4:	80 91 60 00 	lds	r24, 0x0060
  e8:	90 91 61 00 	lds	r25, 0x0061
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 61 00 	sts	0x0061, r25
  f2:	80 93 60 00 	sts	0x0060, r24
	PORTC = (number & 15);
  f6:	e5 e3       	ldi	r30, 0x35	; 53
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 91 60 00 	lds	r24, 0x0060
  fe:	90 91 61 00 	lds	r25, 0x0061
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	80 83       	st	Z, r24
}
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
