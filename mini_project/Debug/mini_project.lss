
mini_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000248  2**0
                  ALLOC
  2 .stab         00000474  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006fe  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
void incrementOneSec();
void resetTimer0();


int main( void )
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/* Initialization. */
	DDRC |= ( 1 << PC0 ) | ( 1 << PC1 ) | ( 1<<PC2 ) | ( 1 << PC3 );//Output.
  84:	a4 e3       	ldi	r26, 0x34	; 52
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 60       	ori	r24, 0x0F	; 15
  90:	8c 93       	st	X, r24

	DDRA = 0b0111111;
  92:	ea e3       	ldi	r30, 0x3A	; 58
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f e3       	ldi	r24, 0x3F	; 63
  98:	80 83       	st	Z, r24
	DDRD &= (~( 1 << PD2 ));//Input.
  9a:	a1 e3       	ldi	r26, 0x31	; 49
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e1 e3       	ldi	r30, 0x31	; 49
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	8c 93       	st	X, r24
	PORTD |= ( 1 << PD2 );//Interrnal Pull Up Resistor.
  a8:	a2 e3       	ldi	r26, 0x32	; 50
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e2 e3       	ldi	r30, 0x32	; 50
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8c 93       	st	X, r24

	/* Initi. timer0. */
	initTimer0();
  b6:	0e 94 6d 00 	call	0xda	; 0xda <initTimer0>
	/* Interrupt Button Which Reset Clock. */
	GICR |= ( 1 << INT0 );
  ba:	ab e5       	ldi	r26, 0x5B	; 91
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	eb e5       	ldi	r30, 0x5B	; 91
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8c 93       	st	X, r24
	MCUCR |= ( 1 << ISC01 );
  c8:	a5 e5       	ldi	r26, 0x55	; 85
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e5 e5       	ldi	r30, 0x55	; 85
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	8c 93       	st	X, r24


	sei();
  d6:	78 94       	sei
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x5c>

000000da <initTimer0>:




void initTimer0()
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= ( 1 << FOC0 ) | ( 1 << CS00 ) | ( 1 << CS02 );
  e2:	a3 e5       	ldi	r26, 0x53	; 83
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e3 e5       	ldi	r30, 0x53	; 83
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	85 68       	ori	r24, 0x85	; 133
  ee:	8c 93       	st	X, r24
	/* Interrupt For Timer0 Overflow. */
	TIMSK = ( 1 << TOIE0 );
  f0:	e9 e5       	ldi	r30, 0x59	; 89
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 83       	st	Z, r24
	TCNT0 = 0;
  f8:	e2 e5       	ldi	r30, 0x52	; 82
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
}
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <resetTimer0>:

void resetTimer0()
{
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
 10c:	e3 e5       	ldi	r30, 0x53	; 83
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	10 82       	st	Z, r1
	initTimer0();
 112:	0e 94 6d 00 	call	0xda	; 0xda <initTimer0>

}
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

0000011c <incrementOneSec>:
void incrementOneSec()
{
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	tick++;
 124:	80 91 60 00 	lds	r24, 0x0060
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 60 00 	sts	0x0060, r24
	if ( tick == 4 ) PORTC++;
 12e:	80 91 60 00 	lds	r24, 0x0060
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	29 f4       	brne	.+10     	; 0x140 <incrementOneSec+0x24>
 136:	e5 e3       	ldi	r30, 0x35	; 53
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 83       	st	Z, r24
}
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <__vector_1>:

ISR( INT0_vect )
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
 168:	df 93       	push	r29
 16a:	cf 93       	push	r28
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	//Interrupt Happen Reset Clock.
	incrementOneSec();
 170:	0e 94 8e 00 	call	0x11c	; 0x11c <incrementOneSec>
}
 174:	cf 91       	pop	r28
 176:	df 91       	pop	r29
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
	PORTC++;
 1b2:	e5 e3       	ldi	r30, 0x35	; 53
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 83       	st	Z, r24
}
 1bc:	cf 91       	pop	r28
 1be:	df 91       	pop	r29
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
