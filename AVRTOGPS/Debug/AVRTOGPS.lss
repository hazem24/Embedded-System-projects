
AVRTOGPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002324  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002324  00002398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b78  00000000  00000000  000023a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bc9  00000000  00000000  00003f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000069da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000078c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000087d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000922f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 24 10 	call	0x2048	; 0x2048 <main>
      7a:	0c 94 90 11 	jmp	0x2320	; 0x2320 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <UART_receiveString_Postion>:
 */

#include"uart.h"

void UART_receiveString_Postion(unit8 *Str)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <UART_receiveString_Postion+0xa>
     b40:	0f 92       	push	r0
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	9b 83       	std	Y+3, r25	; 0x03
     b48:	8a 83       	std	Y+2, r24	; 0x02
	unit8 i = 0;
     b4a:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	9b 81       	ldd	r25, Y+3	; 0x03
     b56:	8c 01       	movw	r16, r24
     b58:	02 0f       	add	r16, r18
     b5a:	13 1f       	adc	r17, r19
     b5c:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_recieveByte>
     b60:	f8 01       	movw	r30, r16
     b62:	80 83       	st	Z, r24

	if(Str[i]=='$'){
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	9b 81       	ldd	r25, Y+3	; 0x03
     b6e:	fc 01       	movw	r30, r24
     b70:	e2 0f       	add	r30, r18
     b72:	f3 1f       	adc	r31, r19
     b74:	80 81       	ld	r24, Z
     b76:	84 32       	cpi	r24, 0x24	; 36
     b78:	d9 f4       	brne	.+54     	; 0xbb0 <UART_receiveString_Postion+0x7a>
     b7a:	0f c0       	rjmp	.+30     	; 0xb9a <UART_receiveString_Postion+0x64>

	      while(Str[i]!= '*' )
	             {
	    	  i++;
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	89 83       	std	Y+1, r24	; 0x01
	    	  Str[i] = UART_recieveByte();
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	9b 81       	ldd	r25, Y+3	; 0x03
     b8c:	8c 01       	movw	r16, r24
     b8e:	02 0f       	add	r16, r18
     b90:	13 1f       	adc	r17, r19
     b92:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_recieveByte>
     b96:	f8 01       	movw	r30, r16
     b98:	80 83       	st	Z, r24

	Str[i] = UART_recieveByte();

	if(Str[i]=='$'){

	      while(Str[i]!= '*' )
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	9b 81       	ldd	r25, Y+3	; 0x03
     ba4:	fc 01       	movw	r30, r24
     ba6:	e2 0f       	add	r30, r18
     ba8:	f3 1f       	adc	r31, r19
     baa:	80 81       	ld	r24, Z
     bac:	8a 32       	cpi	r24, 0x2A	; 42
     bae:	31 f7       	brne	.-52     	; 0xb7c <UART_receiveString_Postion+0x46>
	    	  Str[i] = UART_recieveByte();


	           }
	   }
Str[i]='\0';
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	9b 81       	ldd	r25, Y+3	; 0x03
     bba:	fc 01       	movw	r30, r24
     bbc:	e2 0f       	add	r30, r18
     bbe:	f3 1f       	adc	r31, r19
     bc0:	10 82       	st	Z, r1

}
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	08 95       	ret

00000bd2 <GPS_SERVICE_NAME>:

unit8 GPS_SERVICE_NAME(const unit8* postion,unit8* SERVICE_NAME){
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	27 97       	sbiw	r28, 0x07	; 7
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	8b 83       	std	Y+3, r24	; 0x03
     bea:	7e 83       	std	Y+6, r23	; 0x06
     bec:	6d 83       	std	Y+5, r22	; 0x05

	unit8 i=0,flag=0;
     bee:	1a 82       	std	Y+2, r1	; 0x02
     bf0:	19 82       	std	Y+1, r1	; 0x01

	if ((postion[0]=='$') && (postion[1]=='G')  && (postion[2]=='P') && (postion[3]=='G') && (postion[4]=='G') && (postion[5]=='A')){
     bf2:	eb 81       	ldd	r30, Y+3	; 0x03
     bf4:	fc 81       	ldd	r31, Y+4	; 0x04
     bf6:	80 81       	ld	r24, Z
     bf8:	84 32       	cpi	r24, 0x24	; 36
     bfa:	09 f0       	breq	.+2      	; 0xbfe <GPS_SERVICE_NAME+0x2c>
     bfc:	3f c0       	rjmp	.+126    	; 0xc7c <GPS_SERVICE_NAME+0xaa>
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	fc 01       	movw	r30, r24
     c04:	31 96       	adiw	r30, 0x01	; 1
     c06:	80 81       	ld	r24, Z
     c08:	87 34       	cpi	r24, 0x47	; 71
     c0a:	c1 f5       	brne	.+112    	; 0xc7c <GPS_SERVICE_NAME+0xaa>
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	fc 01       	movw	r30, r24
     c12:	32 96       	adiw	r30, 0x02	; 2
     c14:	80 81       	ld	r24, Z
     c16:	80 35       	cpi	r24, 0x50	; 80
     c18:	89 f5       	brne	.+98     	; 0xc7c <GPS_SERVICE_NAME+0xaa>
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	fc 01       	movw	r30, r24
     c20:	33 96       	adiw	r30, 0x03	; 3
     c22:	80 81       	ld	r24, Z
     c24:	87 34       	cpi	r24, 0x47	; 71
     c26:	51 f5       	brne	.+84     	; 0xc7c <GPS_SERVICE_NAME+0xaa>
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	fc 01       	movw	r30, r24
     c2e:	34 96       	adiw	r30, 0x04	; 4
     c30:	80 81       	ld	r24, Z
     c32:	87 34       	cpi	r24, 0x47	; 71
     c34:	19 f5       	brne	.+70     	; 0xc7c <GPS_SERVICE_NAME+0xaa>
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	fc 01       	movw	r30, r24
     c3c:	35 96       	adiw	r30, 0x05	; 5
     c3e:	80 81       	ld	r24, Z
     c40:	81 34       	cpi	r24, 0x41	; 65
     c42:	e1 f4       	brne	.+56     	; 0xc7c <GPS_SERVICE_NAME+0xaa>

			for(i=0;i<6;i++){
     c44:	1a 82       	std	Y+2, r1	; 0x02
     c46:	15 c0       	rjmp	.+42     	; 0xc72 <GPS_SERVICE_NAME+0xa0>

				SERVICE_NAME[i]=postion[i];
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	dc 01       	movw	r26, r24
     c54:	a2 0f       	add	r26, r18
     c56:	b3 1f       	adc	r27, r19
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	fc 01       	movw	r30, r24
     c64:	e2 0f       	add	r30, r18
     c66:	f3 1f       	adc	r31, r19
     c68:	80 81       	ld	r24, Z
     c6a:	8c 93       	st	X, r24

	unit8 i=0,flag=0;

	if ((postion[0]=='$') && (postion[1]=='G')  && (postion[2]=='P') && (postion[3]=='G') && (postion[4]=='G') && (postion[5]=='A')){

			for(i=0;i<6;i++){
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	8a 83       	std	Y+2, r24	; 0x02
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	86 30       	cpi	r24, 0x06	; 6
     c76:	40 f3       	brcs	.-48     	; 0xc48 <GPS_SERVICE_NAME+0x76>

				SERVICE_NAME[i]=postion[i];

			     }
			flag=1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01


	    }

	SERVICE_NAME[i]='\0';
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	fc 01       	movw	r30, r24
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	10 82       	st	Z, r1

	if (flag==1)
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	19 f4       	brne	.+6      	; 0xc9a <GPS_SERVICE_NAME+0xc8>
		return 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	8f 83       	std	Y+7, r24	; 0x07
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <GPS_SERVICE_NAME+0xca>

return 0;
     c9a:	1f 82       	std	Y+7, r1	; 0x07
     c9c:	8f 81       	ldd	r24, Y+7	; 0x07
}
     c9e:	27 96       	adiw	r28, 0x07	; 7
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <GPS_SERVICE_UTC>:



 void GPS_SERVICE_UTC(const unit8* postion,unit8* UTC){
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <GPS_SERVICE_UTC+0x6>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <GPS_SERVICE_UTC+0x8>
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	9b 83       	std	Y+3, r25	; 0x03
     cc0:	8a 83       	std	Y+2, r24	; 0x02
     cc2:	7d 83       	std	Y+5, r23	; 0x05
     cc4:	6c 83       	std	Y+4, r22	; 0x04
	 unit8 i=0;
     cc6:	19 82       	std	Y+1, r1	; 0x01
	 for(i=0;i<10;i++){
     cc8:	19 82       	std	Y+1, r1	; 0x01
     cca:	18 c0       	rjmp	.+48     	; 0xcfc <GPS_SERVICE_UTC+0x4c>
		 UTC[i]=postion[i+7];
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	dc 01       	movw	r26, r24
     cd8:	a2 0f       	add	r26, r18
     cda:	b3 1f       	adc	r27, r19
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	88 2f       	mov	r24, r24
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	9c 01       	movw	r18, r24
     ce4:	29 5f       	subi	r18, 0xF9	; 249
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	fc 01       	movw	r30, r24
     cee:	e2 0f       	add	r30, r18
     cf0:	f3 1f       	adc	r31, r19
     cf2:	80 81       	ld	r24, Z
     cf4:	8c 93       	st	X, r24



 void GPS_SERVICE_UTC(const unit8* postion,unit8* UTC){
	 unit8 i=0;
	 for(i=0;i<10;i++){
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	8a 30       	cpi	r24, 0x0A	; 10
     d00:	28 f3       	brcs	.-54     	; 0xccc <GPS_SERVICE_UTC+0x1c>
		 UTC[i]=postion[i+7];
	 }
	 UTC[i]='\0';
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	fc 01       	movw	r30, r24
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	10 82       	st	Z, r1

 }
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <UTC_SPLIT_HMS>:

 void UTC_SPLIT_HMS(unit8* UTC,unit8* HOUR,unit8* Min,unit8* Sec){
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	29 97       	sbiw	r28, 0x09	; 9
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	9b 83       	std	Y+3, r25	; 0x03
     d3a:	8a 83       	std	Y+2, r24	; 0x02
     d3c:	7d 83       	std	Y+5, r23	; 0x05
     d3e:	6c 83       	std	Y+4, r22	; 0x04
     d40:	5f 83       	std	Y+7, r21	; 0x07
     d42:	4e 83       	std	Y+6, r20	; 0x06
     d44:	39 87       	std	Y+9, r19	; 0x09
     d46:	28 87       	std	Y+8, r18	; 0x08
     	  unit8 i=0;
     d48:	19 82       	std	Y+1, r1	; 0x01
     	  for(i=0;i<2;i++){
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	3f c0       	rjmp	.+126    	; 0xdcc <UTC_SPLIT_HMS+0xa8>
     		  HOUR[i]=UTC[i];
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	9d 81       	ldd	r25, Y+5	; 0x05
     d58:	dc 01       	movw	r26, r24
     d5a:	a2 0f       	add	r26, r18
     d5c:	b3 1f       	adc	r27, r19
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	9b 81       	ldd	r25, Y+3	; 0x03
     d68:	fc 01       	movw	r30, r24
     d6a:	e2 0f       	add	r30, r18
     d6c:	f3 1f       	adc	r31, r19
     d6e:	80 81       	ld	r24, Z
     d70:	8c 93       	st	X, r24
 			  Min[i]=UTC[i+2];
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	8e 81       	ldd	r24, Y+6	; 0x06
     d7a:	9f 81       	ldd	r25, Y+7	; 0x07
     d7c:	dc 01       	movw	r26, r24
     d7e:	a2 0f       	add	r26, r18
     d80:	b3 1f       	adc	r27, r19
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9c 01       	movw	r18, r24
     d8a:	2e 5f       	subi	r18, 0xFE	; 254
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	9b 81       	ldd	r25, Y+3	; 0x03
     d92:	fc 01       	movw	r30, r24
     d94:	e2 0f       	add	r30, r18
     d96:	f3 1f       	adc	r31, r19
     d98:	80 81       	ld	r24, Z
     d9a:	8c 93       	st	X, r24
 			  Sec[i]=UTC[i+4];
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	88 85       	ldd	r24, Y+8	; 0x08
     da4:	99 85       	ldd	r25, Y+9	; 0x09
     da6:	dc 01       	movw	r26, r24
     da8:	a2 0f       	add	r26, r18
     daa:	b3 1f       	adc	r27, r19
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 01       	movw	r18, r24
     db4:	2c 5f       	subi	r18, 0xFC	; 252
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	fc 01       	movw	r30, r24
     dbe:	e2 0f       	add	r30, r18
     dc0:	f3 1f       	adc	r31, r19
     dc2:	80 81       	ld	r24, Z
     dc4:	8c 93       	st	X, r24

 }

 void UTC_SPLIT_HMS(unit8* UTC,unit8* HOUR,unit8* Min,unit8* Sec){
     	  unit8 i=0;
     	  for(i=0;i<2;i++){
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <UTC_SPLIT_HMS+0xb0>
     dd2:	bd cf       	rjmp	.-134    	; 0xd4e <UTC_SPLIT_HMS+0x2a>
     		  HOUR[i]=UTC[i];
 			  Min[i]=UTC[i+2];
 			  Sec[i]=UTC[i+4];
     	  }

 }
     dd4:	29 96       	adiw	r28, 0x09	; 9
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <LCD_init>:

#include"LCD.h"



void LCD_init(void){
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
   /* set the control pins as output pins*/
	DIRECTION_CTRL_PINS |=(1<<RS)|(1<<RW)|(1<<E);
     dee:	a7 e3       	ldi	r26, 0x37	; 55
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e7 e3       	ldi	r30, 0x37	; 55
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8e 60       	ori	r24, 0x0E	; 14
     dfa:	8c 93       	st	X, r24
     #ifdef FIRST_PINS
	         DIRECTION_DATA_PINS|=0x0F;
	         LCD_sendCommand(BITS_4_MODES);
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     #else
	         DIRECTION_DATA_PINS|=0xF0;
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	80 6f       	ori	r24, 0xF0	; 240
     e08:	8c 93       	st	X, r24
	         LCD_sendCommand(BITS_4_MODES);
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_sendCommand>
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     e10:	88 e2       	ldi	r24, 0x28	; 40
     e12:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_sendCommand>
#endif



	/*display on cursor off*/
	LCD_sendCommand(CURSOR_OFF);
     e16:	8c e0       	ldi	r24, 0x0C	; 12
     e18:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_sendCommand>
	/* clear the screen first*/
	LCD_sendCommand(CLEAR_LCD);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_sendCommand>
}
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <LCD_sendCommand>:

void LCD_sendCommand(unit8 command){
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	c3 56       	subi	r28, 0x63	; 99
     e36:	d0 40       	sbci	r29, 0x00	; 0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	fe 01       	movw	r30, r28
     e44:	ed 59       	subi	r30, 0x9D	; 157
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	80 83       	st	Z, r24
	/*make RS=0 to send command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RS);
     e4a:	a8 e3       	ldi	r26, 0x38	; 56
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e8 e3       	ldi	r30, 0x38	; 56
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8d 7f       	andi	r24, 0xFD	; 253
     e56:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS ,RW);
     e58:	a8 e3       	ldi	r26, 0x38	; 56
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e8 e3       	ldi	r30, 0x38	; 56
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8b 7f       	andi	r24, 0xFB	; 251
     e64:	8c 93       	st	X, r24
     e66:	fe 01       	movw	r30, r28
     e68:	e1 5a       	subi	r30, 0xA1	; 161
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e8       	ldi	r26, 0x80	; 128
     e72:	bf e3       	ldi	r27, 0x3F	; 63
     e74:	80 83       	st	Z, r24
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	a2 83       	std	Z+2, r26	; 0x02
     e7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7c:	8e 01       	movw	r16, r28
     e7e:	05 5a       	subi	r16, 0xA5	; 165
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	fe 01       	movw	r30, r28
     e84:	e1 5a       	subi	r30, 0xA1	; 161
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4a ef       	ldi	r20, 0xFA	; 250
     e96:	54 e4       	ldi	r21, 0x44	; 68
     e98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	f8 01       	movw	r30, r16
     ea2:	80 83       	st	Z, r24
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	a2 83       	std	Z+2, r26	; 0x02
     ea8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eaa:	fe 01       	movw	r30, r28
     eac:	e5 5a       	subi	r30, 0xA5	; 165
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	60 81       	ld	r22, Z
     eb2:	71 81       	ldd	r23, Z+1	; 0x01
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	44 f4       	brge	.+16     	; 0xed8 <LCD_sendCommand+0xb0>
		__ticks = 1;
     ec8:	fe 01       	movw	r30, r28
     eca:	e7 5a       	subi	r30, 0xA7	; 167
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
     ed6:	64 c0       	rjmp	.+200    	; 0xfa0 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     ed8:	fe 01       	movw	r30, r28
     eda:	e5 5a       	subi	r30, 0xA5	; 165
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	0c f0       	brlt	.+2      	; 0xef8 <LCD_sendCommand+0xd0>
     ef6:	43 c0       	rjmp	.+134    	; 0xf7e <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef8:	fe 01       	movw	r30, r28
     efa:	e1 5a       	subi	r30, 0xA1	; 161
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	60 81       	ld	r22, Z
     f00:	71 81       	ldd	r23, Z+1	; 0x01
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	93 81       	ldd	r25, Z+3	; 0x03
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e2       	ldi	r20, 0x20	; 32
     f0c:	51 e4       	ldi	r21, 0x41	; 65
     f0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8e 01       	movw	r16, r28
     f18:	07 5a       	subi	r16, 0xA7	; 167
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	bc 01       	movw	r22, r24
     f1e:	cd 01       	movw	r24, r26
     f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	f8 01       	movw	r30, r16
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	80 83       	st	Z, r24
     f2e:	1f c0       	rjmp	.+62     	; 0xf6e <LCD_sendCommand+0x146>
     f30:	fe 01       	movw	r30, r28
     f32:	e9 5a       	subi	r30, 0xA9	; 169
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	88 ec       	ldi	r24, 0xC8	; 200
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f3e:	fe 01       	movw	r30, r28
     f40:	e9 5a       	subi	r30, 0xA9	; 169
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <LCD_sendCommand+0x120>
     f4c:	fe 01       	movw	r30, r28
     f4e:	e9 5a       	subi	r30, 0xA9	; 169
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f56:	de 01       	movw	r26, r28
     f58:	a7 5a       	subi	r26, 0xA7	; 167
     f5a:	bf 4f       	sbci	r27, 0xFF	; 255
     f5c:	fe 01       	movw	r30, r28
     f5e:	e7 5a       	subi	r30, 0xA7	; 167
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	9c 93       	st	X, r25
     f6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	fe 01       	movw	r30, r28
     f70:	e7 5a       	subi	r30, 0xA7	; 167
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	d1 f6       	brne	.-76     	; 0xf30 <LCD_sendCommand+0x108>
     f7c:	27 c0       	rjmp	.+78     	; 0xfcc <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	8e 01       	movw	r16, r28
     f80:	07 5a       	subi	r16, 0xA7	; 167
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	fe 01       	movw	r30, r28
     f86:	e5 5a       	subi	r30, 0xA5	; 165
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	f8 01       	movw	r30, r16
     f9c:	91 83       	std	Z+1, r25	; 0x01
     f9e:	80 83       	st	Z, r24
     fa0:	de 01       	movw	r26, r28
     fa2:	ab 5a       	subi	r26, 0xAB	; 171
     fa4:	bf 4f       	sbci	r27, 0xFF	; 255
     fa6:	fe 01       	movw	r30, r28
     fa8:	e7 5a       	subi	r30, 0xA7	; 167
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	8d 93       	st	X+, r24
     fb2:	9c 93       	st	X, r25
     fb4:	fe 01       	movw	r30, r28
     fb6:	eb 5a       	subi	r30, 0xAB	; 171
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <LCD_sendCommand+0x196>
     fc2:	fe 01       	movw	r30, r28
     fc4:	eb 5a       	subi	r30, 0xAB	; 171
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
     fcc:	a8 e3       	ldi	r26, 0x38	; 56
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e8 e3       	ldi	r30, 0x38	; 56
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 60       	ori	r24, 0x08	; 8
     fd8:	8c 93       	st	X, r24
     fda:	fe 01       	movw	r30, r28
     fdc:	ef 5a       	subi	r30, 0xAF	; 175
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e8       	ldi	r26, 0x80	; 128
     fe6:	bf e3       	ldi	r27, 0x3F	; 63
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	8e 01       	movw	r16, r28
     ff2:	03 5b       	subi	r16, 0xB3	; 179
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	ef 5a       	subi	r30, 0xAF	; 175
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a ef       	ldi	r20, 0xFA	; 250
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101e:	fe 01       	movw	r30, r28
    1020:	e3 5b       	subi	r30, 0xB3	; 179
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1038:	88 23       	and	r24, r24
    103a:	44 f4       	brge	.+16     	; 0x104c <LCD_sendCommand+0x224>
		__ticks = 1;
    103c:	fe 01       	movw	r30, r28
    103e:	e5 5b       	subi	r30, 0xB5	; 181
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
    104a:	64 c0       	rjmp	.+200    	; 0x1114 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    104c:	fe 01       	movw	r30, r28
    104e:	e3 5b       	subi	r30, 0xB3	; 179
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1066:	18 16       	cp	r1, r24
    1068:	0c f0       	brlt	.+2      	; 0x106c <LCD_sendCommand+0x244>
    106a:	43 c0       	rjmp	.+134    	; 0x10f2 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	fe 01       	movw	r30, r28
    106e:	ef 5a       	subi	r30, 0xAF	; 175
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	93 81       	ldd	r25, Z+3	; 0x03
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8e 01       	movw	r16, r28
    108c:	05 5b       	subi	r16, 0xB5	; 181
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	f8 01       	movw	r30, r16
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    10a2:	1f c0       	rjmp	.+62     	; 0x10e2 <LCD_sendCommand+0x2ba>
    10a4:	fe 01       	movw	r30, r28
    10a6:	e7 5b       	subi	r30, 0xB7	; 183
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	88 ec       	ldi	r24, 0xC8	; 200
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
    10b2:	fe 01       	movw	r30, r28
    10b4:	e7 5b       	subi	r30, 0xB7	; 183
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <LCD_sendCommand+0x294>
    10c0:	fe 01       	movw	r30, r28
    10c2:	e7 5b       	subi	r30, 0xB7	; 183
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	de 01       	movw	r26, r28
    10cc:	a5 5b       	subi	r26, 0xB5	; 181
    10ce:	bf 4f       	sbci	r27, 0xFF	; 255
    10d0:	fe 01       	movw	r30, r28
    10d2:	e5 5b       	subi	r30, 0xB5	; 181
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	9c 93       	st	X, r25
    10e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	fe 01       	movw	r30, r28
    10e4:	e5 5b       	subi	r30, 0xB5	; 181
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	d1 f6       	brne	.-76     	; 0x10a4 <LCD_sendCommand+0x27c>
    10f0:	27 c0       	rjmp	.+78     	; 0x1140 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	8e 01       	movw	r16, r28
    10f4:	05 5b       	subi	r16, 0xB5	; 181
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	fe 01       	movw	r30, r28
    10fa:	e3 5b       	subi	r30, 0xB3	; 179
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	f8 01       	movw	r30, r16
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
    1114:	de 01       	movw	r26, r28
    1116:	a9 5b       	subi	r26, 0xB9	; 185
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	fe 01       	movw	r30, r28
    111c:	e5 5b       	subi	r30, 0xB5	; 181
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	8d 93       	st	X+, r24
    1126:	9c 93       	st	X, r25
    1128:	fe 01       	movw	r30, r28
    112a:	e9 5b       	subi	r30, 0xB9	; 185
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <LCD_sendCommand+0x30a>
    1136:	fe 01       	movw	r30, r28
    1138:	e9 5b       	subi	r30, 0xB9	; 185
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24

	   /*	DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS & 0xF0) | ((command & 0xF0) >> 4);*/
	   	    TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
     #else
	   	/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (command & 0xF0);*/
	   	  TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	98 2f       	mov	r25, r24
    114c:	9f 70       	andi	r25, 0x0F	; 15
    114e:	fe 01       	movw	r30, r28
    1150:	ed 59       	subi	r30, 0x9D	; 157
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 81       	ld	r24, Z
    1156:	80 7f       	andi	r24, 0xF0	; 240
    1158:	89 2b       	or	r24, r25
    115a:	8c 93       	st	X, r24
    115c:	fe 01       	movw	r30, r28
    115e:	ed 5b       	subi	r30, 0xBD	; 189
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 e8       	ldi	r26, 0x80	; 128
    1168:	bf e3       	ldi	r27, 0x3F	; 63
    116a:	80 83       	st	Z, r24
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	a2 83       	std	Z+2, r26	; 0x02
    1170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	8e 01       	movw	r16, r28
    1174:	01 5c       	subi	r16, 0xC1	; 193
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	ed 5b       	subi	r30, 0xBD	; 189
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a ef       	ldi	r20, 0xFA	; 250
    118c:	54 e4       	ldi	r21, 0x44	; 68
    118e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	80 83       	st	Z, r24
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	a2 83       	std	Z+2, r26	; 0x02
    119e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11a0:	fe 01       	movw	r30, r28
    11a2:	ff 96       	adiw	r30, 0x3f	; 63
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <LCD_sendCommand+0x39e>
		__ticks = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9e af       	std	Y+62, r25	; 0x3e
    11c2:	8d af       	std	Y+61, r24	; 0x3d
    11c4:	46 c0       	rjmp	.+140    	; 0x1252 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    11c6:	fe 01       	movw	r30, r28
    11c8:	ff 96       	adiw	r30, 0x3f	; 63
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	64 f5       	brge	.+88     	; 0x123a <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e2:	fe 01       	movw	r30, r28
    11e4:	ed 5b       	subi	r30, 0xBD	; 189
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e af       	std	Y+62, r25	; 0x3e
    120e:	8d af       	std	Y+61, r24	; 0x3d
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <LCD_sendCommand+0x408>
    1212:	88 ec       	ldi	r24, 0xC8	; 200
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c af       	std	Y+60, r25	; 0x3c
    1218:	8b af       	std	Y+59, r24	; 0x3b
    121a:	8b ad       	ldd	r24, Y+59	; 0x3b
    121c:	9c ad       	ldd	r25, Y+60	; 0x3c
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <LCD_sendCommand+0x3f6>
    1222:	9c af       	std	Y+60, r25	; 0x3c
    1224:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	8d ad       	ldd	r24, Y+61	; 0x3d
    1228:	9e ad       	ldd	r25, Y+62	; 0x3e
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9e af       	std	Y+62, r25	; 0x3e
    122e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	8d ad       	ldd	r24, Y+61	; 0x3d
    1232:	9e ad       	ldd	r25, Y+62	; 0x3e
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f7       	brne	.-38     	; 0x1212 <LCD_sendCommand+0x3ea>
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e af       	std	Y+62, r25	; 0x3e
    1250:	8d af       	std	Y+61, r24	; 0x3d
    1252:	8d ad       	ldd	r24, Y+61	; 0x3d
    1254:	9e ad       	ldd	r25, Y+62	; 0x3e
    1256:	9a af       	std	Y+58, r25	; 0x3a
    1258:	89 af       	std	Y+57, r24	; 0x39
    125a:	89 ad       	ldd	r24, Y+57	; 0x39
    125c:	9a ad       	ldd	r25, Y+58	; 0x3a
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <LCD_sendCommand+0x436>
    1262:	9a af       	std	Y+58, r25	; 0x3a
    1264:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    1266:	a8 e3       	ldi	r26, 0x38	; 56
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	87 7f       	andi	r24, 0xF7	; 247
    1272:	8c 93       	st	X, r24
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a0 e8       	ldi	r26, 0x80	; 128
    127a:	bf e3       	ldi	r27, 0x3F	; 63
    127c:	8d ab       	std	Y+53, r24	; 0x35
    127e:	9e ab       	std	Y+54, r25	; 0x36
    1280:	af ab       	std	Y+55, r26	; 0x37
    1282:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6d a9       	ldd	r22, Y+53	; 0x35
    1286:	7e a9       	ldd	r23, Y+54	; 0x36
    1288:	8f a9       	ldd	r24, Y+55	; 0x37
    128a:	98 ad       	ldd	r25, Y+56	; 0x38
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a ef       	ldi	r20, 0xFA	; 250
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	89 ab       	std	Y+49, r24	; 0x31
    129e:	9a ab       	std	Y+50, r25	; 0x32
    12a0:	ab ab       	std	Y+51, r26	; 0x33
    12a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12a4:	69 a9       	ldd	r22, Y+49	; 0x31
    12a6:	7a a9       	ldd	r23, Y+50	; 0x32
    12a8:	8b a9       	ldd	r24, Y+51	; 0x33
    12aa:	9c a9       	ldd	r25, Y+52	; 0x34
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <LCD_sendCommand+0x49e>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	98 ab       	std	Y+48, r25	; 0x30
    12c2:	8f a7       	std	Y+47, r24	; 0x2f
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    12c6:	69 a9       	ldd	r22, Y+49	; 0x31
    12c8:	7a a9       	ldd	r23, Y+50	; 0x32
    12ca:	8b a9       	ldd	r24, Y+51	; 0x33
    12cc:	9c a9       	ldd	r25, Y+52	; 0x34
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6d a9       	ldd	r22, Y+53	; 0x35
    12e0:	7e a9       	ldd	r23, Y+54	; 0x36
    12e2:	8f a9       	ldd	r24, Y+55	; 0x37
    12e4:	98 ad       	ldd	r25, Y+56	; 0x38
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	98 ab       	std	Y+48, r25	; 0x30
    1304:	8f a7       	std	Y+47, r24	; 0x2f
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <LCD_sendCommand+0x4fe>
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e a7       	std	Y+46, r25	; 0x2e
    130e:	8d a7       	std	Y+45, r24	; 0x2d
    1310:	8d a5       	ldd	r24, Y+45	; 0x2d
    1312:	9e a5       	ldd	r25, Y+46	; 0x2e
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCD_sendCommand+0x4ec>
    1318:	9e a7       	std	Y+46, r25	; 0x2e
    131a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8f a5       	ldd	r24, Y+47	; 0x2f
    131e:	98 a9       	ldd	r25, Y+48	; 0x30
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	98 ab       	std	Y+48, r25	; 0x30
    1324:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8f a5       	ldd	r24, Y+47	; 0x2f
    1328:	98 a9       	ldd	r25, Y+48	; 0x30
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <LCD_sendCommand+0x4e0>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	69 a9       	ldd	r22, Y+49	; 0x31
    1332:	7a a9       	ldd	r23, Y+50	; 0x32
    1334:	8b a9       	ldd	r24, Y+51	; 0x33
    1336:	9c a9       	ldd	r25, Y+52	; 0x34
    1338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	98 ab       	std	Y+48, r25	; 0x30
    1342:	8f a7       	std	Y+47, r24	; 0x2f
    1344:	8f a5       	ldd	r24, Y+47	; 0x2f
    1346:	98 a9       	ldd	r25, Y+48	; 0x30
    1348:	9c a7       	std	Y+44, r25	; 0x2c
    134a:	8b a7       	std	Y+43, r24	; 0x2b
    134c:	8b a5       	ldd	r24, Y+43	; 0x2b
    134e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <LCD_sendCommand+0x528>
    1354:	9c a7       	std	Y+44, r25	; 0x2c
    1356:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    1358:	a8 e3       	ldi	r26, 0x38	; 56
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	88 60       	ori	r24, 0x08	; 8
    1364:	8c 93       	st	X, r24
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a0 e8       	ldi	r26, 0x80	; 128
    136c:	bf e3       	ldi	r27, 0x3F	; 63
    136e:	8f a3       	std	Y+39, r24	; 0x27
    1370:	98 a7       	std	Y+40, r25	; 0x28
    1372:	a9 a7       	std	Y+41, r26	; 0x29
    1374:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1376:	6f a1       	ldd	r22, Y+39	; 0x27
    1378:	78 a5       	ldd	r23, Y+40	; 0x28
    137a:	89 a5       	ldd	r24, Y+41	; 0x29
    137c:	9a a5       	ldd	r25, Y+42	; 0x2a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	4a ef       	ldi	r20, 0xFA	; 250
    1384:	54 e4       	ldi	r21, 0x44	; 68
    1386:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	8b a3       	std	Y+35, r24	; 0x23
    1390:	9c a3       	std	Y+36, r25	; 0x24
    1392:	ad a3       	std	Y+37, r26	; 0x25
    1394:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1396:	6b a1       	ldd	r22, Y+35	; 0x23
    1398:	7c a1       	ldd	r23, Y+36	; 0x24
    139a:	8d a1       	ldd	r24, Y+37	; 0x25
    139c:	9e a1       	ldd	r25, Y+38	; 0x26
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e8       	ldi	r20, 0x80	; 128
    13a4:	5f e3       	ldi	r21, 0x3F	; 63
    13a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13aa:	88 23       	and	r24, r24
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <LCD_sendCommand+0x590>
		__ticks = 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	9a a3       	std	Y+34, r25	; 0x22
    13b4:	89 a3       	std	Y+33, r24	; 0x21
    13b6:	3f c0       	rjmp	.+126    	; 0x1436 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    13b8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ba:	7c a1       	ldd	r23, Y+36	; 0x24
    13bc:	8d a1       	ldd	r24, Y+37	; 0x25
    13be:	9e a1       	ldd	r25, Y+38	; 0x26
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	3f ef       	ldi	r19, 0xFF	; 255
    13c4:	4f e7       	ldi	r20, 0x7F	; 127
    13c6:	57 e4       	ldi	r21, 0x47	; 71
    13c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13cc:	18 16       	cp	r1, r24
    13ce:	4c f5       	brge	.+82     	; 0x1422 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d0:	6f a1       	ldd	r22, Y+39	; 0x27
    13d2:	78 a5       	ldd	r23, Y+40	; 0x28
    13d4:	89 a5       	ldd	r24, Y+41	; 0x29
    13d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e2       	ldi	r20, 0x20	; 32
    13de:	51 e4       	ldi	r21, 0x41	; 65
    13e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9a a3       	std	Y+34, r25	; 0x22
    13f6:	89 a3       	std	Y+33, r24	; 0x21
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <LCD_sendCommand+0x5f0>
    13fa:	88 ec       	ldi	r24, 0xC8	; 200
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	98 a3       	std	Y+32, r25	; 0x20
    1400:	8f 8f       	std	Y+31, r24	; 0x1f
    1402:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1404:	98 a1       	ldd	r25, Y+32	; 0x20
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <LCD_sendCommand+0x5de>
    140a:	98 a3       	std	Y+32, r25	; 0x20
    140c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140e:	89 a1       	ldd	r24, Y+33	; 0x21
    1410:	9a a1       	ldd	r25, Y+34	; 0x22
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	9a a3       	std	Y+34, r25	; 0x22
    1416:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1418:	89 a1       	ldd	r24, Y+33	; 0x21
    141a:	9a a1       	ldd	r25, Y+34	; 0x22
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	69 f7       	brne	.-38     	; 0x13fa <LCD_sendCommand+0x5d2>
    1420:	14 c0       	rjmp	.+40     	; 0x144a <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1422:	6b a1       	ldd	r22, Y+35	; 0x23
    1424:	7c a1       	ldd	r23, Y+36	; 0x24
    1426:	8d a1       	ldd	r24, Y+37	; 0x25
    1428:	9e a1       	ldd	r25, Y+38	; 0x26
    142a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	9a a3       	std	Y+34, r25	; 0x22
    1434:	89 a3       	std	Y+33, r24	; 0x21
    1436:	89 a1       	ldd	r24, Y+33	; 0x21
    1438:	9a a1       	ldd	r25, Y+34	; 0x22
    143a:	9e 8f       	std	Y+30, r25	; 0x1e
    143c:	8d 8f       	std	Y+29, r24	; 0x1d
    143e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1440:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <LCD_sendCommand+0x61a>
    1446:	9e 8f       	std	Y+30, r25	; 0x1e
    1448:	8d 8f       	std	Y+29, r24	; 0x1d
		    TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
     #else

	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((command&0x0F)<<4);*/

	        TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
    144a:	ab e3       	ldi	r26, 0x3B	; 59
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	2f 70       	andi	r18, 0x0F	; 15
    1458:	fe 01       	movw	r30, r28
    145a:	ed 59       	subi	r30, 0x9D	; 157
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	80 81       	ld	r24, Z
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	82 95       	swap	r24
    1466:	92 95       	swap	r25
    1468:	90 7f       	andi	r25, 0xF0	; 240
    146a:	98 27       	eor	r25, r24
    146c:	80 7f       	andi	r24, 0xF0	; 240
    146e:	98 27       	eor	r25, r24
    1470:	82 2b       	or	r24, r18
    1472:	8c 93       	st	X, r24
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a0 e8       	ldi	r26, 0x80	; 128
    147a:	bf e3       	ldi	r27, 0x3F	; 63
    147c:	89 8f       	std	Y+25, r24	; 0x19
    147e:	9a 8f       	std	Y+26, r25	; 0x1a
    1480:	ab 8f       	std	Y+27, r26	; 0x1b
    1482:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1484:	69 8d       	ldd	r22, Y+25	; 0x19
    1486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	4a ef       	ldi	r20, 0xFA	; 250
    1492:	54 e4       	ldi	r21, 0x44	; 68
    1494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	8d 8b       	std	Y+21, r24	; 0x15
    149e:	9e 8b       	std	Y+22, r25	; 0x16
    14a0:	af 8b       	std	Y+23, r26	; 0x17
    14a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14a4:	6d 89       	ldd	r22, Y+21	; 0x15
    14a6:	7e 89       	ldd	r23, Y+22	; 0x16
    14a8:	8f 89       	ldd	r24, Y+23	; 0x17
    14aa:	98 8d       	ldd	r25, Y+24	; 0x18
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	5f e3       	ldi	r21, 0x3F	; 63
    14b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14b8:	88 23       	and	r24, r24
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <LCD_sendCommand+0x69e>
		__ticks = 1;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9c 8b       	std	Y+20, r25	; 0x14
    14c2:	8b 8b       	std	Y+19, r24	; 0x13
    14c4:	3f c0       	rjmp	.+126    	; 0x1544 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    14c6:	6d 89       	ldd	r22, Y+21	; 0x15
    14c8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ca:	8f 89       	ldd	r24, Y+23	; 0x17
    14cc:	98 8d       	ldd	r25, Y+24	; 0x18
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	3f ef       	ldi	r19, 0xFF	; 255
    14d2:	4f e7       	ldi	r20, 0x7F	; 127
    14d4:	57 e4       	ldi	r21, 0x47	; 71
    14d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14da:	18 16       	cp	r1, r24
    14dc:	4c f5       	brge	.+82     	; 0x1530 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14de:	69 8d       	ldd	r22, Y+25	; 0x19
    14e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e2       	ldi	r20, 0x20	; 32
    14ec:	51 e4       	ldi	r21, 0x41	; 65
    14ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	bc 01       	movw	r22, r24
    14f8:	cd 01       	movw	r24, r26
    14fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	9c 8b       	std	Y+20, r25	; 0x14
    1504:	8b 8b       	std	Y+19, r24	; 0x13
    1506:	0f c0       	rjmp	.+30     	; 0x1526 <LCD_sendCommand+0x6fe>
    1508:	88 ec       	ldi	r24, 0xC8	; 200
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9a 8b       	std	Y+18, r25	; 0x12
    150e:	89 8b       	std	Y+17, r24	; 0x11
    1510:	89 89       	ldd	r24, Y+17	; 0x11
    1512:	9a 89       	ldd	r25, Y+18	; 0x12
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <LCD_sendCommand+0x6ec>
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151c:	8b 89       	ldd	r24, Y+19	; 0x13
    151e:	9c 89       	ldd	r25, Y+20	; 0x14
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	9c 8b       	std	Y+20, r25	; 0x14
    1524:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1526:	8b 89       	ldd	r24, Y+19	; 0x13
    1528:	9c 89       	ldd	r25, Y+20	; 0x14
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	69 f7       	brne	.-38     	; 0x1508 <LCD_sendCommand+0x6e0>
    152e:	14 c0       	rjmp	.+40     	; 0x1558 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1530:	6d 89       	ldd	r22, Y+21	; 0x15
    1532:	7e 89       	ldd	r23, Y+22	; 0x16
    1534:	8f 89       	ldd	r24, Y+23	; 0x17
    1536:	98 8d       	ldd	r25, Y+24	; 0x18
    1538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9c 8b       	std	Y+20, r25	; 0x14
    1542:	8b 8b       	std	Y+19, r24	; 0x13
    1544:	8b 89       	ldd	r24, Y+19	; 0x13
    1546:	9c 89       	ldd	r25, Y+20	; 0x14
    1548:	98 8b       	std	Y+16, r25	; 0x10
    154a:	8f 87       	std	Y+15, r24	; 0x0f
    154c:	8f 85       	ldd	r24, Y+15	; 0x0f
    154e:	98 89       	ldd	r25, Y+16	; 0x10
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <LCD_sendCommand+0x728>
    1554:	98 8b       	std	Y+16, r25	; 0x10
    1556:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    1558:	a8 e3       	ldi	r26, 0x38	; 56
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e3       	ldi	r30, 0x38	; 56
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	87 7f       	andi	r24, 0xF7	; 247
    1564:	8c 93       	st	X, r24
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a0 e8       	ldi	r26, 0x80	; 128
    156c:	bf e3       	ldi	r27, 0x3F	; 63
    156e:	8b 87       	std	Y+11, r24	; 0x0b
    1570:	9c 87       	std	Y+12, r25	; 0x0c
    1572:	ad 87       	std	Y+13, r26	; 0x0d
    1574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	6b 85       	ldd	r22, Y+11	; 0x0b
    1578:	7c 85       	ldd	r23, Y+12	; 0x0c
    157a:	8d 85       	ldd	r24, Y+13	; 0x0d
    157c:	9e 85       	ldd	r25, Y+14	; 0x0e
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a ef       	ldi	r20, 0xFA	; 250
    1584:	54 e4       	ldi	r21, 0x44	; 68
    1586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8f 83       	std	Y+7, r24	; 0x07
    1590:	98 87       	std	Y+8, r25	; 0x08
    1592:	a9 87       	std	Y+9, r26	; 0x09
    1594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <LCD_sendCommand+0x790>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	4c f5       	brge	.+82     	; 0x1622 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <LCD_sendCommand+0x7f0>
    15fa:	88 ec       	ldi	r24, 0xC8	; 200
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LCD_sendCommand+0x7de>
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f7       	brne	.-38     	; 0x15fa <LCD_sendCommand+0x7d2>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_sendCommand+0x81a>
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    164a:	cd 59       	subi	r28, 0x9D	; 157
    164c:	df 4f       	sbci	r29, 0xFF	; 255
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <LCD_displayChar>:
#endif




  void LCD_displayChar(unit8 data){
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	c3 56       	subi	r28, 0x63	; 99
    1670:	d0 40       	sbci	r29, 0x00	; 0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	fe 01       	movw	r30, r28
    167e:	ed 59       	subi	r30, 0x9D	; 157
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 83       	st	Z, r24
	/*make RS=1 to send data*/
	Pin_output(CTRL_OUTPUT_PINS  ,RS);
    1684:	a8 e3       	ldi	r26, 0x38	; 56
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e8 e3       	ldi	r30, 0x38	; 56
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	82 60       	ori	r24, 0x02	; 2
    1690:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RW);
    1692:	a8 e3       	ldi	r26, 0x38	; 56
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e8 e3       	ldi	r30, 0x38	; 56
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8b 7f       	andi	r24, 0xFB	; 251
    169e:	8c 93       	st	X, r24
    16a0:	fe 01       	movw	r30, r28
    16a2:	e1 5a       	subi	r30, 0xA1	; 161
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 e8       	ldi	r26, 0x80	; 128
    16ac:	bf e3       	ldi	r27, 0x3F	; 63
    16ae:	80 83       	st	Z, r24
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	a2 83       	std	Z+2, r26	; 0x02
    16b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b6:	8e 01       	movw	r16, r28
    16b8:	05 5a       	subi	r16, 0xA5	; 165
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	e1 5a       	subi	r30, 0xA1	; 161
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a ef       	ldi	r20, 0xFA	; 250
    16d0:	54 e4       	ldi	r21, 0x44	; 68
    16d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	f8 01       	movw	r30, r16
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	a2 83       	std	Z+2, r26	; 0x02
    16e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16e4:	fe 01       	movw	r30, r28
    16e6:	e5 5a       	subi	r30, 0xA5	; 165
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	44 f4       	brge	.+16     	; 0x1712 <LCD_displayChar+0xb0>
		__ticks = 1;
    1702:	fe 01       	movw	r30, r28
    1704:	e7 5a       	subi	r30, 0xA7	; 167
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
    1710:	64 c0       	rjmp	.+200    	; 0x17da <LCD_displayChar+0x178>
	else if (__tmp > 65535)
    1712:	fe 01       	movw	r30, r28
    1714:	e5 5a       	subi	r30, 0xA5	; 165
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    172c:	18 16       	cp	r1, r24
    172e:	0c f0       	brlt	.+2      	; 0x1732 <LCD_displayChar+0xd0>
    1730:	43 c0       	rjmp	.+134    	; 0x17b8 <LCD_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	fe 01       	movw	r30, r28
    1734:	e1 5a       	subi	r30, 0xA1	; 161
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	51 e4       	ldi	r21, 0x41	; 65
    1748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8e 01       	movw	r16, r28
    1752:	07 5a       	subi	r16, 0xA7	; 167
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	f8 01       	movw	r30, r16
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
    1768:	1f c0       	rjmp	.+62     	; 0x17a8 <LCD_displayChar+0x146>
    176a:	fe 01       	movw	r30, r28
    176c:	e9 5a       	subi	r30, 0xA9	; 169
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	88 ec       	ldi	r24, 0xC8	; 200
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
    1778:	fe 01       	movw	r30, r28
    177a:	e9 5a       	subi	r30, 0xA9	; 169
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <LCD_displayChar+0x120>
    1786:	fe 01       	movw	r30, r28
    1788:	e9 5a       	subi	r30, 0xA9	; 169
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	de 01       	movw	r26, r28
    1792:	a7 5a       	subi	r26, 0xA7	; 167
    1794:	bf 4f       	sbci	r27, 0xFF	; 255
    1796:	fe 01       	movw	r30, r28
    1798:	e7 5a       	subi	r30, 0xA7	; 167
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	11 96       	adiw	r26, 0x01	; 1
    17a4:	9c 93       	st	X, r25
    17a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	fe 01       	movw	r30, r28
    17aa:	e7 5a       	subi	r30, 0xA7	; 167
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	d1 f6       	brne	.-76     	; 0x176a <LCD_displayChar+0x108>
    17b6:	27 c0       	rjmp	.+78     	; 0x1806 <LCD_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	8e 01       	movw	r16, r28
    17ba:	07 5a       	subi	r16, 0xA7	; 167
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	fe 01       	movw	r30, r28
    17c0:	e5 5a       	subi	r30, 0xA5	; 165
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	f8 01       	movw	r30, r16
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
    17da:	de 01       	movw	r26, r28
    17dc:	ab 5a       	subi	r26, 0xAB	; 171
    17de:	bf 4f       	sbci	r27, 0xFF	; 255
    17e0:	fe 01       	movw	r30, r28
    17e2:	e7 5a       	subi	r30, 0xA7	; 167
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	8d 93       	st	X+, r24
    17ec:	9c 93       	st	X, r25
    17ee:	fe 01       	movw	r30, r28
    17f0:	eb 5a       	subi	r30, 0xAB	; 171
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_displayChar+0x196>
    17fc:	fe 01       	movw	r30, r28
    17fe:	eb 5a       	subi	r30, 0xAB	; 171
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
    1806:	a8 e3       	ldi	r26, 0x38	; 56
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e8 e3       	ldi	r30, 0x38	; 56
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	88 60       	ori	r24, 0x08	; 8
    1812:	8c 93       	st	X, r24
    1814:	fe 01       	movw	r30, r28
    1816:	ef 5a       	subi	r30, 0xAF	; 175
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 e8       	ldi	r26, 0x80	; 128
    1820:	bf e3       	ldi	r27, 0x3F	; 63
    1822:	80 83       	st	Z, r24
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	a2 83       	std	Z+2, r26	; 0x02
    1828:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	8e 01       	movw	r16, r28
    182c:	03 5b       	subi	r16, 0xB3	; 179
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	ef 5a       	subi	r30, 0xAF	; 175
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a ef       	ldi	r20, 0xFA	; 250
    1844:	54 e4       	ldi	r21, 0x44	; 68
    1846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	80 83       	st	Z, r24
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	a2 83       	std	Z+2, r26	; 0x02
    1856:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1858:	fe 01       	movw	r30, r28
    185a:	e3 5b       	subi	r30, 0xB3	; 179
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	44 f4       	brge	.+16     	; 0x1886 <LCD_displayChar+0x224>
		__ticks = 1;
    1876:	fe 01       	movw	r30, r28
    1878:	e5 5b       	subi	r30, 0xB5	; 181
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
    1884:	64 c0       	rjmp	.+200    	; 0x194e <LCD_displayChar+0x2ec>
	else if (__tmp > 65535)
    1886:	fe 01       	movw	r30, r28
    1888:	e3 5b       	subi	r30, 0xB3	; 179
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	4f e7       	ldi	r20, 0x7F	; 127
    189a:	57 e4       	ldi	r21, 0x47	; 71
    189c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <LCD_displayChar+0x244>
    18a4:	43 c0       	rjmp	.+134    	; 0x192c <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 5a       	subi	r30, 0xAF	; 175
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	51 e4       	ldi	r21, 0x41	; 65
    18bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8e 01       	movw	r16, r28
    18c6:	05 5b       	subi	r16, 0xB5	; 181
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	f8 01       	movw	r30, r16
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	1f c0       	rjmp	.+62     	; 0x191c <LCD_displayChar+0x2ba>
    18de:	fe 01       	movw	r30, r28
    18e0:	e7 5b       	subi	r30, 0xB7	; 183
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 5b       	subi	r30, 0xB7	; 183
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_displayChar+0x294>
    18fa:	fe 01       	movw	r30, r28
    18fc:	e7 5b       	subi	r30, 0xB7	; 183
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1904:	de 01       	movw	r26, r28
    1906:	a5 5b       	subi	r26, 0xB5	; 181
    1908:	bf 4f       	sbci	r27, 0xFF	; 255
    190a:	fe 01       	movw	r30, r28
    190c:	e5 5b       	subi	r30, 0xB5	; 181
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	11 96       	adiw	r26, 0x01	; 1
    1918:	9c 93       	st	X, r25
    191a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191c:	fe 01       	movw	r30, r28
    191e:	e5 5b       	subi	r30, 0xB5	; 181
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	d1 f6       	brne	.-76     	; 0x18de <LCD_displayChar+0x27c>
    192a:	27 c0       	rjmp	.+78     	; 0x197a <LCD_displayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	8e 01       	movw	r16, r28
    192e:	05 5b       	subi	r16, 0xB5	; 181
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	e3 5b       	subi	r30, 0xB3	; 179
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	f8 01       	movw	r30, r16
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
    194e:	de 01       	movw	r26, r28
    1950:	a9 5b       	subi	r26, 0xB9	; 185
    1952:	bf 4f       	sbci	r27, 0xFF	; 255
    1954:	fe 01       	movw	r30, r28
    1956:	e5 5b       	subi	r30, 0xB5	; 181
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	8d 93       	st	X+, r24
    1960:	9c 93       	st	X, r25
    1962:	fe 01       	movw	r30, r28
    1964:	e9 5b       	subi	r30, 0xB9	; 185
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_displayChar+0x30a>
    1970:	fe 01       	movw	r30, r28
    1972:	e9 5b       	subi	r30, 0xB9	; 185
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24

	   	TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);

     #else
		/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (data & 0xF0);*/
		TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);
    197a:	ab e3       	ldi	r26, 0x3B	; 59
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	eb e3       	ldi	r30, 0x3B	; 59
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	98 2f       	mov	r25, r24
    1986:	9f 70       	andi	r25, 0x0F	; 15
    1988:	fe 01       	movw	r30, r28
    198a:	ed 59       	subi	r30, 0x9D	; 157
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 81       	ld	r24, Z
    1990:	80 7f       	andi	r24, 0xF0	; 240
    1992:	89 2b       	or	r24, r25
    1994:	8c 93       	st	X, r24
    1996:	fe 01       	movw	r30, r28
    1998:	ed 5b       	subi	r30, 0xBD	; 189
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e8       	ldi	r26, 0x80	; 128
    19a2:	bf e3       	ldi	r27, 0x3F	; 63
    19a4:	80 83       	st	Z, r24
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	a2 83       	std	Z+2, r26	; 0x02
    19aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	8e 01       	movw	r16, r28
    19ae:	01 5c       	subi	r16, 0xC1	; 193
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	fe 01       	movw	r30, r28
    19b4:	ed 5b       	subi	r30, 0xBD	; 189
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4a ef       	ldi	r20, 0xFA	; 250
    19c6:	54 e4       	ldi	r21, 0x44	; 68
    19c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	f8 01       	movw	r30, r16
    19d2:	80 83       	st	Z, r24
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	a2 83       	std	Z+2, r26	; 0x02
    19d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19da:	fe 01       	movw	r30, r28
    19dc:	ff 96       	adiw	r30, 0x3f	; 63
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <LCD_displayChar+0x39e>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9e af       	std	Y+62, r25	; 0x3e
    19fc:	8d af       	std	Y+61, r24	; 0x3d
    19fe:	46 c0       	rjmp	.+140    	; 0x1a8c <LCD_displayChar+0x42a>
	else if (__tmp > 65535)
    1a00:	fe 01       	movw	r30, r28
    1a02:	ff 96       	adiw	r30, 0x3f	; 63
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	64 f5       	brge	.+88     	; 0x1a74 <LCD_displayChar+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ed 5b       	subi	r30, 0xBD	; 189
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9e af       	std	Y+62, r25	; 0x3e
    1a48:	8d af       	std	Y+61, r24	; 0x3d
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <LCD_displayChar+0x408>
    1a4c:	88 ec       	ldi	r24, 0xC8	; 200
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9c af       	std	Y+60, r25	; 0x3c
    1a52:	8b af       	std	Y+59, r24	; 0x3b
    1a54:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a56:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_displayChar+0x3f6>
    1a5c:	9c af       	std	Y+60, r25	; 0x3c
    1a5e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	9e af       	std	Y+62, r25	; 0x3e
    1a68:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <LCD_displayChar+0x3ea>
    1a72:	16 c0       	rjmp	.+44     	; 0x1aa0 <LCD_displayChar+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a74:	fe 01       	movw	r30, r28
    1a76:	ff 96       	adiw	r30, 0x3f	; 63
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e af       	std	Y+62, r25	; 0x3e
    1a8a:	8d af       	std	Y+61, r24	; 0x3d
    1a8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a90:	9a af       	std	Y+58, r25	; 0x3a
    1a92:	89 af       	std	Y+57, r24	; 0x39
    1a94:	89 ad       	ldd	r24, Y+57	; 0x39
    1a96:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <LCD_displayChar+0x436>
    1a9c:	9a af       	std	Y+58, r25	; 0x3a
    1a9e:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    1aa0:	a8 e3       	ldi	r26, 0x38	; 56
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e8 e3       	ldi	r30, 0x38	; 56
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	87 7f       	andi	r24, 0xF7	; 247
    1aac:	8c 93       	st	X, r24
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	8d ab       	std	Y+53, r24	; 0x35
    1ab8:	9e ab       	std	Y+54, r25	; 0x36
    1aba:	af ab       	std	Y+55, r26	; 0x37
    1abc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	89 ab       	std	Y+49, r24	; 0x31
    1ad8:	9a ab       	std	Y+50, r25	; 0x32
    1ada:	ab ab       	std	Y+51, r26	; 0x33
    1adc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ade:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LCD_displayChar+0x49e>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LCD_displayChar+0x51c>
	else if (__tmp > 65535)
    1b00:	69 a9       	ldd	r22, Y+49	; 0x31
    1b02:	7a a9       	ldd	r23, Y+50	; 0x32
    1b04:	8b a9       	ldd	r24, Y+51	; 0x33
    1b06:	9c a9       	ldd	r25, Y+52	; 0x34
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LCD_displayChar+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LCD_displayChar+0x4fe>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9e a7       	std	Y+46, r25	; 0x2e
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
    1b4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_displayChar+0x4ec>
    1b52:	9e a7       	std	Y+46, r25	; 0x2e
    1b54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b58:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	98 ab       	std	Y+48, r25	; 0x30
    1b5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b62:	98 a9       	ldd	r25, Y+48	; 0x30
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LCD_displayChar+0x4e0>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <LCD_displayChar+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b70:	9c a9       	ldd	r25, Y+52	; 0x34
    1b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	98 ab       	std	Y+48, r25	; 0x30
    1b7c:	8f a7       	std	Y+47, r24	; 0x2f
    1b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b80:	98 a9       	ldd	r25, Y+48	; 0x30
    1b82:	9c a7       	std	Y+44, r25	; 0x2c
    1b84:	8b a7       	std	Y+43, r24	; 0x2b
    1b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_displayChar+0x528>
    1b8e:	9c a7       	std	Y+44, r25	; 0x2c
    1b90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    1b92:	a8 e3       	ldi	r26, 0x38	; 56
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e8 e3       	ldi	r30, 0x38	; 56
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 60       	ori	r24, 0x08	; 8
    1b9e:	8c 93       	st	X, r24
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	bf e3       	ldi	r27, 0x3F	; 63
    1ba8:	8f a3       	std	Y+39, r24	; 0x27
    1baa:	98 a7       	std	Y+40, r25	; 0x28
    1bac:	a9 a7       	std	Y+41, r26	; 0x29
    1bae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8b a3       	std	Y+35, r24	; 0x23
    1bca:	9c a3       	std	Y+36, r25	; 0x24
    1bcc:	ad a3       	std	Y+37, r26	; 0x25
    1bce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <LCD_displayChar+0x590>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9a a3       	std	Y+34, r25	; 0x22
    1bee:	89 a3       	std	Y+33, r24	; 0x21
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <LCD_displayChar+0x60e>
	else if (__tmp > 65535)
    1bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <LCD_displayChar+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9a a3       	std	Y+34, r25	; 0x22
    1c30:	89 a3       	std	Y+33, r24	; 0x21
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <LCD_displayChar+0x5f0>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	98 a3       	std	Y+32, r25	; 0x20
    1c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_displayChar+0x5de>
    1c44:	98 a3       	std	Y+32, r25	; 0x20
    1c46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9a a3       	std	Y+34, r25	; 0x22
    1c50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	89 a1       	ldd	r24, Y+33	; 0x21
    1c54:	9a a1       	ldd	r25, Y+34	; 0x22
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <LCD_displayChar+0x5d2>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <LCD_displayChar+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c60:	8d a1       	ldd	r24, Y+37	; 0x25
    1c62:	9e a1       	ldd	r25, Y+38	; 0x26
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9a a3       	std	Y+34, r25	; 0x22
    1c6e:	89 a3       	std	Y+33, r24	; 0x21
    1c70:	89 a1       	ldd	r24, Y+33	; 0x21
    1c72:	9a a1       	ldd	r25, Y+34	; 0x22
    1c74:	9e 8f       	std	Y+30, r25	; 0x1e
    1c76:	8d 8f       	std	Y+29, r24	; 0x1d
    1c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_displayChar+0x61a>
    1c80:	9e 8f       	std	Y+30, r25	; 0x1e
    1c82:	8d 8f       	std	Y+29, r24	; 0x1d
		/*DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS& 0xF0) | (data & 0x0F);*/
		  TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);

     #else
	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((data&0x0F)<<4);*/
		     TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);
    1c84:	ab e3       	ldi	r26, 0x3B	; 59
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	eb e3       	ldi	r30, 0x3B	; 59
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	28 2f       	mov	r18, r24
    1c90:	2f 70       	andi	r18, 0x0F	; 15
    1c92:	fe 01       	movw	r30, r28
    1c94:	ed 59       	subi	r30, 0x9D	; 157
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	88 2f       	mov	r24, r24
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	82 95       	swap	r24
    1ca0:	92 95       	swap	r25
    1ca2:	90 7f       	andi	r25, 0xF0	; 240
    1ca4:	98 27       	eor	r25, r24
    1ca6:	80 7f       	andi	r24, 0xF0	; 240
    1ca8:	98 27       	eor	r25, r24
    1caa:	82 2b       	or	r24, r18
    1cac:	8c 93       	st	X, r24
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e8       	ldi	r26, 0x80	; 128
    1cb4:	bf e3       	ldi	r27, 0x3F	; 63
    1cb6:	89 8f       	std	Y+25, r24	; 0x19
    1cb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1cba:	ab 8f       	std	Y+27, r26	; 0x1b
    1cbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a ef       	ldi	r20, 0xFA	; 250
    1ccc:	54 e4       	ldi	r21, 0x44	; 68
    1cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8d 8b       	std	Y+21, r24	; 0x15
    1cd8:	9e 8b       	std	Y+22, r25	; 0x16
    1cda:	af 8b       	std	Y+23, r26	; 0x17
    1cdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cde:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <LCD_displayChar+0x69e>
		__ticks = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9c 8b       	std	Y+20, r25	; 0x14
    1cfc:	8b 8b       	std	Y+19, r24	; 0x13
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <LCD_displayChar+0x71c>
	else if (__tmp > 65535)
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	4c f5       	brge	.+82     	; 0x1d6a <LCD_displayChar+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9c 8b       	std	Y+20, r25	; 0x14
    1d3e:	8b 8b       	std	Y+19, r24	; 0x13
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <LCD_displayChar+0x6fe>
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
    1d4a:	89 89       	ldd	r24, Y+17	; 0x11
    1d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_displayChar+0x6ec>
    1d52:	9a 8b       	std	Y+18, r25	; 0x12
    1d54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	8b 89       	ldd	r24, Y+19	; 0x13
    1d58:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <LCD_displayChar+0x6e0>
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <LCD_displayChar+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9c 8b       	std	Y+20, r25	; 0x14
    1d7c:	8b 8b       	std	Y+19, r24	; 0x13
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	98 8b       	std	Y+16, r25	; 0x10
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	98 89       	ldd	r25, Y+16	; 0x10
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_displayChar+0x728>
    1d8e:	98 8b       	std	Y+16, r25	; 0x10
    1d90:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    1d92:	a8 e3       	ldi	r26, 0x38	; 56
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e8 e3       	ldi	r30, 0x38	; 56
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	87 7f       	andi	r24, 0xF7	; 247
    1d9e:	8c 93       	st	X, r24
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	8b 87       	std	Y+11, r24	; 0x0b
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	ad 87       	std	Y+13, r26	; 0x0d
    1dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8f 83       	std	Y+7, r24	; 0x07
    1dca:	98 87       	std	Y+8, r25	; 0x08
    1dcc:	a9 87       	std	Y+9, r26	; 0x09
    1dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_displayChar+0x790>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_displayChar+0x80e>
	else if (__tmp > 65535)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_displayChar+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_displayChar+0x7f0>
    1e34:	88 ec       	ldi	r24, 0xC8	; 200
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_displayChar+0x7de>
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_displayChar+0x7d2>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_displayChar+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_displayChar+0x81a>
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    1e84:	cd 59       	subi	r28, 0x9D	; 157
    1e86:	df 4f       	sbci	r29, 0xFF	; 255
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	08 95       	ret

00001e9c <LCD_displayString>:




   void LCD_displayString(const char *Str)
   {
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <LCD_displayString+0x6>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	0a c0       	rjmp	.+20     	; 0x1ec0 <LCD_displayString+0x24>

   	while((*Str) != '\0')
   	{
   		LCD_displayChar(*Str);
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	80 81       	ld	r24, Z
    1eb2:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayChar>
   		Str++;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01


   void LCD_displayString(const char *Str)
   {

   	while((*Str) != '\0')
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 23       	and	r24, r24
    1ec8:	89 f7       	brne	.-30     	; 0x1eac <LCD_displayString+0x10>
   	{
   		LCD_displayChar(*Str);
   		Str++;
   	}
   }
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <LCD_displayString_GPS>:

   /*********************************************************************************************/

   void LCD_displayString_GPS(const char *Str)
      {
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <LCD_displayString_GPS+0x6>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	9a 83       	std	Y+2, r25	; 0x02
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	0a c0       	rjmp	.+20     	; 0x1ef8 <LCD_displayString_GPS+0x24>

      	while((*Str) != '*')
      	{
      		LCD_displayChar(*Str);
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	80 81       	ld	r24, Z
    1eea:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayChar>
      		Str++;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
   /*********************************************************************************************/

   void LCD_displayString_GPS(const char *Str)
      {

      	while((*Str) != '*')
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	80 81       	ld	r24, Z
    1efe:	8a 32       	cpi	r24, 0x2A	; 42
    1f00:	89 f7       	brne	.-30     	; 0x1ee4 <LCD_displayString_GPS+0x10>
      	{
      		LCD_displayChar(*Str);
      		Str++;
      	}
      }
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <LCD_gotoRawCol>:


   /***********************************************************************************************/


   void LCD_gotoRawCol(unit8 row, unit8 col){
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LCD_gotoRawCol+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <LCD_gotoRawCol+0x8>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
	   unit8 address;
	   switch(row){
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	31 f0       	breq	.+12     	; 0x1f3c <LCD_gotoRawCol+0x30>
    1f30:	2c 81       	ldd	r18, Y+4	; 0x04
    1f32:	3d 81       	ldd	r19, Y+5	; 0x05
    1f34:	21 30       	cpi	r18, 0x01	; 1
    1f36:	31 05       	cpc	r19, r1
    1f38:	21 f0       	breq	.+8      	; 0x1f42 <LCD_gotoRawCol+0x36>
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <LCD_gotoRawCol+0x3c>
	       case 0:
		      address=col;
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <LCD_gotoRawCol+0x3c>
		       break;
	       case 1:
		      address=0x40+col;
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	80 5c       	subi	r24, 0xC0	; 192
    1f46:	89 83       	std	Y+1, r24	; 0x01
	        }
	    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	80 68       	ori	r24, 0x80	; 128
    1f4c:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_sendCommand>

	   }
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <LCD_IntToStr>:



void LCD_IntToStr(unit8 data){
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	61 97       	sbiw	r28, 0x11	; 17
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    1f76:	89 89       	ldd	r24, Y+17	; 0x11
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e 01       	movw	r18, r28
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	b9 01       	movw	r22, r18
    1f84:	4a e0       	ldi	r20, 0x0A	; 10
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	0e 94 4b 11 	call	0x2296	; 0x2296 <itoa>
	LCD_displayString(buff);
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_displayString>
}
    1f94:	61 96       	adiw	r28, 0x11	; 17
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <LCD_displayStrRowCol>:


void LCD_displayStrRowCol(unit8 row,unit8 col,const char *Str){
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	28 97       	sbiw	r28, 0x08	; 8
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	8b 83       	std	Y+3, r24	; 0x03
    1fbc:	6c 83       	std	Y+4, r22	; 0x04
    1fbe:	5e 83       	std	Y+6, r21	; 0x06
    1fc0:	4d 83       	std	Y+5, r20	; 0x05
	unit8 address,i=0;
    1fc2:	19 82       	std	Y+1, r1	; 0x01
		   switch(row){
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	38 87       	std	Y+8, r19	; 0x08
    1fcc:	2f 83       	std	Y+7, r18	; 0x07
    1fce:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd0:	98 85       	ldd	r25, Y+8	; 0x08
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	31 f0       	breq	.+12     	; 0x1fe2 <LCD_displayStrRowCol+0x3c>
    1fd6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fd8:	38 85       	ldd	r19, Y+8	; 0x08
    1fda:	21 30       	cpi	r18, 0x01	; 1
    1fdc:	31 05       	cpc	r19, r1
    1fde:	21 f0       	breq	.+8      	; 0x1fe8 <LCD_displayStrRowCol+0x42>
    1fe0:	06 c0       	rjmp	.+12     	; 0x1fee <LCD_displayStrRowCol+0x48>
		       case 0:
			      address=col;
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <LCD_displayStrRowCol+0x48>
			       break;
		       case 1:
			      address=0x40+col;
    1fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fea:	80 5c       	subi	r24, 0xC0	; 192
    1fec:	8a 83       	std	Y+2, r24	; 0x02
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	80 68       	ori	r24, 0x80	; 128
    1ff2:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_sendCommand>
    1ff6:	10 c0       	rjmp	.+32     	; 0x2018 <LCD_displayStrRowCol+0x72>

	while((*Str) != '\0')
   	{
   		LCD_displayChar(Str[i]);
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	fc 01       	movw	r30, r24
    2004:	e2 0f       	add	r30, r18
    2006:	f3 1f       	adc	r31, r19
    2008:	80 81       	ld	r24, Z
    200a:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayChar>
   		Str++;
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
		       case 1:
			      address=0x40+col;
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);

	while((*Str) != '\0')
    2018:	ed 81       	ldd	r30, Y+5	; 0x05
    201a:	fe 81       	ldd	r31, Y+6	; 0x06
    201c:	80 81       	ld	r24, Z
    201e:	88 23       	and	r24, r24
    2020:	59 f7       	brne	.-42     	; 0x1ff8 <LCD_displayStrRowCol+0x52>
   	{
   		LCD_displayChar(Str[i]);
   		Str++;
   	}
}
    2022:	28 96       	adiw	r28, 0x08	; 8
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_LCD); //clear display
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0e 94 14 07 	call	0xe28	; 0xe28 <LCD_sendCommand>
}
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <main>:

#include"GPS.h"
#include"LCD.h"


int main(void){
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	cb 55       	subi	r28, 0x5B	; 91
    2052:	d0 40       	sbci	r29, 0x00	; 0
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61


	unit8 postion[68],GPGGA[5],True=0,UTC[10],HOUR[2],Min[2],Sec[2];
    205e:	1a 82       	std	Y+2, r1	; 0x02



	LCD_init();
    2060:	0e 94 f3 06 	call	0xde6	; 0xde6 <LCD_init>

	UART_init();
    2064:	0e 94 68 10 	call	0x20d0	; 0x20d0 <UART_init>


	// unit8* ch="$GPGGA,054355.000,0029.8450,N,00031.3275,W,1,6,1.25,84.0,M,-2.2,M,,*74";
     unit8 ch;

    DDRD|=0x80;
    2068:	a1 e3       	ldi	r26, 0x31	; 49
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e1 e3       	ldi	r30, 0x31	; 49
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 68       	ori	r24, 0x80	; 128
    2074:	8c 93       	st	X, r24
    PORTD=(1<<6);
    2076:	e2 e3       	ldi	r30, 0x32	; 50
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 e4       	ldi	r24, 0x40	; 64
    207c:	80 83       	st	Z, r24

	while(1){
		/*ch=UART_recieveByte();
		LCD_displayChar(ch);*/

		UART_receiveString_Postion(postion);
    207e:	ce 01       	movw	r24, r28
    2080:	03 96       	adiw	r24, 0x03	; 3
    2082:	0e 94 9b 05 	call	0xb36	; 0xb36 <UART_receiveString_Postion>


        True=GPS_SERVICE_NAME(postion,GPGGA);
    2086:	ce 01       	movw	r24, r28
    2088:	03 96       	adiw	r24, 0x03	; 3
    208a:	9e 01       	movw	r18, r28
    208c:	29 5b       	subi	r18, 0xB9	; 185
    208e:	3f 4f       	sbci	r19, 0xFF	; 255
    2090:	b9 01       	movw	r22, r18
    2092:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <GPS_SERVICE_NAME>
    2096:	8a 83       	std	Y+2, r24	; 0x02

       if(True){
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	88 23       	and	r24, r24
    209c:	81 f3       	breq	.-32     	; 0x207e <main+0x36>
        LCD_displayStrRowCol(0,0,GPGGA);
    209e:	9e 01       	movw	r18, r28
    20a0:	29 5b       	subi	r18, 0xB9	; 185
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	a9 01       	movw	r20, r18
    20aa:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_displayStrRowCol>
        GPS_SERVICE_UTC(postion,UTC);
    20ae:	ce 01       	movw	r24, r28
    20b0:	03 96       	adiw	r24, 0x03	; 3
    20b2:	9e 01       	movw	r18, r28
    20b4:	24 5b       	subi	r18, 0xB4	; 180
    20b6:	3f 4f       	sbci	r19, 0xFF	; 255
    20b8:	b9 01       	movw	r22, r18
    20ba:	0e 94 58 06 	call	0xcb0	; 0xcb0 <GPS_SERVICE_UTC>
        LCD_displayStrRowCol(1,0,UTC);
    20be:	9e 01       	movw	r18, r28
    20c0:	24 5b       	subi	r18, 0xB4	; 180
    20c2:	3f 4f       	sbci	r19, 0xFF	; 255
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <LCD_displayStrRowCol>
    20ce:	d7 cf       	rjmp	.-82     	; 0x207e <main+0x36>

000020d0 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	 UCSRA = (1<<U2X);
    20d8:	eb e2       	ldi	r30, 0x2B	; 43
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    20e0:	ea e2       	ldi	r30, 0x2A	; 42
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	88 e1       	ldi	r24, 0x18	; 24
    20e6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    20e8:	e0 e4       	ldi	r30, 0x40	; 64
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	86 e8       	ldi	r24, 0x86	; 134
    20ee:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    20f0:	e0 e4       	ldi	r30, 0x40	; 64
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    20f6:	e9 e2       	ldi	r30, 0x29	; 41
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	87 e6       	ldi	r24, 0x67	; 103
    20fc:	80 83       	st	Z, r24
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <UART_sendByte>:
	
void UART_sendByte(const unit8 data)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	0f 92       	push	r0
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(Pin_is_clear(UCSRA,UDRE)){}
    2110:	eb e2       	ldi	r30, 0x2B	; 43
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	80 72       	andi	r24, 0x20	; 32
    211c:	90 70       	andi	r25, 0x00	; 0
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	b9 f3       	breq	.-18     	; 0x2110 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2122:	ec e2       	ldi	r30, 0x2C	; 44
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <UART_recieveByte>:

unit8 UART_recieveByte(void)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(Pin_is_clear(UCSRA,RXC)){}
    213a:	eb e2       	ldi	r30, 0x2B	; 43
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	88 23       	and	r24, r24
    2142:	dc f7       	brge	.-10     	; 0x213a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2144:	ec e2       	ldi	r30, 0x2C	; 44
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
}
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <UART_sendString>:

void UART_sendString(const unit8 *Str)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <UART_sendString+0x6>
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	9b 83       	std	Y+3, r25	; 0x03
    215e:	8a 83       	std	Y+2, r24	; 0x02
	unit8 i = 0;
    2160:	19 82       	std	Y+1, r1	; 0x01
    2162:	0e c0       	rjmp	.+28     	; 0x2180 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	9b 81       	ldd	r25, Y+3	; 0x03
    216e:	fc 01       	movw	r30, r24
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	80 81       	ld	r24, Z
    2176:	0e 94 82 10 	call	0x2104	; 0x2104 <UART_sendByte>
		i++;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	8f 5f       	subi	r24, 0xFF	; 255
    217e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const unit8 *Str)
{
	unit8 i = 0;
	while(Str[i] != '\0')
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	9b 81       	ldd	r25, Y+3	; 0x03
    218a:	fc 01       	movw	r30, r24
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	80 81       	ld	r24, Z
    2192:	88 23       	and	r24, r24
    2194:	39 f7       	brne	.-50     	; 0x2164 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <UART_receiveString>:

void UART_receiveString(unit8 *Str)
{
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <UART_receiveString+0xa>
    21ac:	0f 92       	push	r0
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	9b 83       	std	Y+3, r25	; 0x03
    21b4:	8a 83       	std	Y+2, r24	; 0x02
	unit8 i = 0;
    21b6:	19 82       	std	Y+1, r1	; 0x01



	Str[i] = UART_recieveByte();
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	9b 81       	ldd	r25, Y+3	; 0x03
    21c2:	8c 01       	movw	r16, r24
    21c4:	02 0f       	add	r16, r18
    21c6:	13 1f       	adc	r17, r19
    21c8:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_recieveByte>
    21cc:	f8 01       	movw	r30, r16
    21ce:	80 83       	st	Z, r24
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <UART_receiveString+0x4e>

	while(Str[i]!='#')
	      {
		i++;
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	8c 01       	movw	r16, r24
    21e4:	02 0f       	add	r16, r18
    21e6:	13 1f       	adc	r17, r19
    21e8:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_recieveByte>
    21ec:	f8 01       	movw	r30, r16
    21ee:	80 83       	st	Z, r24



	Str[i] = UART_recieveByte();

	while(Str[i]!='#')
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	9b 81       	ldd	r25, Y+3	; 0x03
    21fa:	fc 01       	movw	r30, r24
    21fc:	e2 0f       	add	r30, r18
    21fe:	f3 1f       	adc	r31, r19
    2200:	80 81       	ld	r24, Z
    2202:	83 32       	cpi	r24, 0x23	; 35
    2204:	31 f7       	brne	.-52     	; 0x21d2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();

	}

	Str[i] = '\0';
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	fc 01       	movw	r30, r24
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	10 82       	st	Z, r1
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <__prologue_saves__>:
    2228:	2f 92       	push	r2
    222a:	3f 92       	push	r3
    222c:	4f 92       	push	r4
    222e:	5f 92       	push	r5
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	ca 1b       	sub	r28, r26
    2252:	db 0b       	sbc	r29, r27
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	09 94       	ijmp

00002260 <__epilogue_restores__>:
    2260:	2a 88       	ldd	r2, Y+18	; 0x12
    2262:	39 88       	ldd	r3, Y+17	; 0x11
    2264:	48 88       	ldd	r4, Y+16	; 0x10
    2266:	5f 84       	ldd	r5, Y+15	; 0x0f
    2268:	6e 84       	ldd	r6, Y+14	; 0x0e
    226a:	7d 84       	ldd	r7, Y+13	; 0x0d
    226c:	8c 84       	ldd	r8, Y+12	; 0x0c
    226e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2270:	aa 84       	ldd	r10, Y+10	; 0x0a
    2272:	b9 84       	ldd	r11, Y+9	; 0x09
    2274:	c8 84       	ldd	r12, Y+8	; 0x08
    2276:	df 80       	ldd	r13, Y+7	; 0x07
    2278:	ee 80       	ldd	r14, Y+6	; 0x06
    227a:	fd 80       	ldd	r15, Y+5	; 0x05
    227c:	0c 81       	ldd	r16, Y+4	; 0x04
    227e:	1b 81       	ldd	r17, Y+3	; 0x03
    2280:	aa 81       	ldd	r26, Y+2	; 0x02
    2282:	b9 81       	ldd	r27, Y+1	; 0x01
    2284:	ce 0f       	add	r28, r30
    2286:	d1 1d       	adc	r29, r1
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	ed 01       	movw	r28, r26
    2294:	08 95       	ret

00002296 <itoa>:
    2296:	fb 01       	movw	r30, r22
    2298:	9f 01       	movw	r18, r30
    229a:	e8 94       	clt
    229c:	42 30       	cpi	r20, 0x02	; 2
    229e:	c4 f0       	brlt	.+48     	; 0x22d0 <itoa+0x3a>
    22a0:	45 32       	cpi	r20, 0x25	; 37
    22a2:	b4 f4       	brge	.+44     	; 0x22d0 <itoa+0x3a>
    22a4:	4a 30       	cpi	r20, 0x0A	; 10
    22a6:	29 f4       	brne	.+10     	; 0x22b2 <itoa+0x1c>
    22a8:	97 fb       	bst	r25, 7
    22aa:	1e f4       	brtc	.+6      	; 0x22b2 <itoa+0x1c>
    22ac:	90 95       	com	r25
    22ae:	81 95       	neg	r24
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	64 2f       	mov	r22, r20
    22b4:	77 27       	eor	r23, r23
    22b6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__udivmodhi4>
    22ba:	80 5d       	subi	r24, 0xD0	; 208
    22bc:	8a 33       	cpi	r24, 0x3A	; 58
    22be:	0c f0       	brlt	.+2      	; 0x22c2 <itoa+0x2c>
    22c0:	89 5d       	subi	r24, 0xD9	; 217
    22c2:	81 93       	st	Z+, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	a1 f7       	brne	.-24     	; 0x22b2 <itoa+0x1c>
    22ca:	16 f4       	brtc	.+4      	; 0x22d0 <itoa+0x3a>
    22cc:	5d e2       	ldi	r21, 0x2D	; 45
    22ce:	51 93       	st	Z+, r21
    22d0:	10 82       	st	Z, r1
    22d2:	c9 01       	movw	r24, r18
    22d4:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <strrev>

000022d8 <strrev>:
    22d8:	dc 01       	movw	r26, r24
    22da:	fc 01       	movw	r30, r24
    22dc:	67 2f       	mov	r22, r23
    22de:	71 91       	ld	r23, Z+
    22e0:	77 23       	and	r23, r23
    22e2:	e1 f7       	brne	.-8      	; 0x22dc <strrev+0x4>
    22e4:	32 97       	sbiw	r30, 0x02	; 2
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <strrev+0x18>
    22e8:	7c 91       	ld	r23, X
    22ea:	6d 93       	st	X+, r22
    22ec:	70 83       	st	Z, r23
    22ee:	62 91       	ld	r22, -Z
    22f0:	ae 17       	cp	r26, r30
    22f2:	bf 07       	cpc	r27, r31
    22f4:	c8 f3       	brcs	.-14     	; 0x22e8 <strrev+0x10>
    22f6:	08 95       	ret

000022f8 <__udivmodhi4>:
    22f8:	aa 1b       	sub	r26, r26
    22fa:	bb 1b       	sub	r27, r27
    22fc:	51 e1       	ldi	r21, 0x11	; 17
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <__udivmodhi4_ep>

00002300 <__udivmodhi4_loop>:
    2300:	aa 1f       	adc	r26, r26
    2302:	bb 1f       	adc	r27, r27
    2304:	a6 17       	cp	r26, r22
    2306:	b7 07       	cpc	r27, r23
    2308:	10 f0       	brcs	.+4      	; 0x230e <__udivmodhi4_ep>
    230a:	a6 1b       	sub	r26, r22
    230c:	b7 0b       	sbc	r27, r23

0000230e <__udivmodhi4_ep>:
    230e:	88 1f       	adc	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	5a 95       	dec	r21
    2314:	a9 f7       	brne	.-22     	; 0x2300 <__udivmodhi4_loop>
    2316:	80 95       	com	r24
    2318:	90 95       	com	r25
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	08 95       	ret

00002320 <_exit>:
    2320:	f8 94       	cli

00002322 <__stop_program>:
    2322:	ff cf       	rjmp	.-2      	; 0x2322 <__stop_program>
