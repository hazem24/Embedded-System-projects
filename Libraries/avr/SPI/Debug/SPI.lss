
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000873  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "data_type.h"
#include "micro_config.h"


int main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <SPI_init>:

/*
 * SPI init.
 */
void SPI_init()
{
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	cd b7       	in	r28, 0x3d	; 61
  7c:	de b7       	in	r29, 0x3e	; 62
	 * SPSR.
	 	 * SPIF -> Set equal one whenever a serial transfer is complete .. cleared by set logic one on it.
	 * SPDR.
	 	 * SPI  -> data register is an 8-bit read/write register.
	 */
	SPCR = 1 << SPE & (~(1 << CPOL)) & (~(1 << CPHA));
  7e:	ed e2       	ldi	r30, 0x2D	; 45
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	80 83       	st	Z, r24
	 * Ports.
	 */
	SPI_DDR = 0xB0;
	SPCR |= 1 << MSTR | SCK_FREQUENCE;
#elif MODE == 0
	SPI_DDR = 0x40;
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 e4       	ldi	r24, 0x40	; 64
  8c:	80 83       	st	Z, r24
	CLEAR_BIT(SPCR, MSTR);
  8e:	ad e2       	ldi	r26, 0x2D	; 45
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	ed e2       	ldi	r30, 0x2D	; 45
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	8f 7e       	andi	r24, 0xEF	; 239
  9a:	8c 93       	st	X, r24
#endif
}
  9c:	cf 91       	pop	r28
  9e:	df 91       	pop	r29
  a0:	08 95       	ret

000000a2 <SPI_sendByte>:

/*
 * SPI send Byte Logic.
 */
void SPI_sendByte( uint8 byte )
{
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	0f 92       	push	r0
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	89 83       	std	Y+1, r24	; 0x01
	 	 * SPI  -> data register is an 8-bit read/write register.
	 */
#if MODE == 1
	CLEAR_BIT(SPI_PORT, SPI_SS);
#endif
	SPDR = byte;
  ae:	ef e2       	ldi	r30, 0x2F	; 47
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(SPSR, SPIF) );
  b6:	ee e2       	ldi	r30, 0x2E	; 46
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 23       	and	r24, r24
  be:	dc f7       	brge	.-10     	; 0xb6 <SPI_sendByte+0x14>
#if MODE == 1
	SET_BIT(SPI_PORT, SPI_SS);
#endif
}
  c0:	0f 90       	pop	r0
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <SPI_receiveByte>:

/*
 * SPI receive byte.
 */
uint8 SPI_receiveByte()
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	while( BIT_IS_CLEAR(SPSR, SPIF) );
  d0:	ee e2       	ldi	r30, 0x2E	; 46
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	dc f7       	brge	.-10     	; 0xd0 <SPI_receiveByte+0x8>
	return SPDR;
  da:	ef e2       	ldi	r30, 0x2F	; 47
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
}
  e0:	cf 91       	pop	r28
  e2:	df 91       	pop	r29
  e4:	08 95       	ret

000000e6 <SPI_sendString>:
/*
 * SPI sendString.
 */
void SPI_sendString(uint8* string)
{
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	00 d0       	rcall	.+0      	; 0xec <SPI_sendString+0x6>
  ec:	0f 92       	push	r0
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	9b 83       	std	Y+3, r25	; 0x03
  f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	0b c0       	rjmp	.+22     	; 0x110 <SPI_sendString+0x2a>
	while( string[i] != '\0')
	{
		SPI_sendByte(string[i]);
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	28 2f       	mov	r18, r24
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	9b 81       	ldd	r25, Y+3	; 0x03
 104:	fc 01       	movw	r30, r24
 106:	e2 0f       	add	r30, r18
 108:	f3 1f       	adc	r31, r19
 10a:	80 81       	ld	r24, Z
 10c:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_sendByte>
 * SPI sendString.
 */
void SPI_sendString(uint8* string)
{
	uint8 i = 0;
	while( string[i] != '\0')
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	9b 81       	ldd	r25, Y+3	; 0x03
 11a:	fc 01       	movw	r30, r24
 11c:	e2 0f       	add	r30, r18
 11e:	f3 1f       	adc	r31, r19
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	51 f7       	brne	.-44     	; 0xfa <SPI_sendString+0x14>
	{
		SPI_sendByte(string[i]);
	}
}
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	08 95       	ret

00000132 <SPI_receiveString>:

/*
 * SPI receive String.
 */
void SPI_receiveString(uint8* string)
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	00 d0       	rcall	.+0      	; 0x13c <SPI_receiveString+0xa>
 13c:	0f 92       	push	r0
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	9b 83       	std	Y+3, r25	; 0x03
 144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;

	string[i] = SPI_receiveByte();
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	9b 81       	ldd	r25, Y+3	; 0x03
 150:	8c 01       	movw	r16, r24
 152:	02 0f       	add	r16, r18
 154:	13 1f       	adc	r17, r19
 156:	0e 94 64 00 	call	0xc8	; 0xc8 <SPI_receiveByte>
 15a:	f8 01       	movw	r30, r16
 15c:	80 83       	st	Z, r24
 15e:	0f c0       	rjmp	.+30     	; 0x17e <SPI_receiveString+0x4c>
	while( string[i] != '#' )
	{
		i++;
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	89 83       	std	Y+1, r24	; 0x01
		string[i] = SPI_receiveByte();
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	9b 81       	ldd	r25, Y+3	; 0x03
 170:	8c 01       	movw	r16, r24
 172:	02 0f       	add	r16, r18
 174:	13 1f       	adc	r17, r19
 176:	0e 94 64 00 	call	0xc8	; 0xc8 <SPI_receiveByte>
 17a:	f8 01       	movw	r30, r16
 17c:	80 83       	st	Z, r24
void SPI_receiveString(uint8* string)
{
	uint8 i;

	string[i] = SPI_receiveByte();
	while( string[i] != '#' )
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	9b 81       	ldd	r25, Y+3	; 0x03
 188:	fc 01       	movw	r30, r24
 18a:	e2 0f       	add	r30, r18
 18c:	f3 1f       	adc	r31, r19
 18e:	80 81       	ld	r24, Z
 190:	83 32       	cpi	r24, 0x23	; 35
 192:	31 f7       	brne	.-52     	; 0x160 <SPI_receiveString+0x2e>
	{
		i++;
		string[i] = SPI_receiveByte();
	}
	string[i] = '\0';
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	9b 81       	ldd	r25, Y+3	; 0x03
 19e:	fc 01       	movw	r30, r24
 1a0:	e2 0f       	add	r30, r18
 1a2:	f3 1f       	adc	r31, r19
 1a4:	10 82       	st	Z, r1
}
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	cf 91       	pop	r28
 1ae:	df 91       	pop	r29
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
