
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000007bc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000090e  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "micro_config.h"
#include "common_macros.h"
#include "uart.h"

int main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <UART_init>:

/*
 * UART init.
 */
void UART_init()
{
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	cd b7       	in	r28, 0x3d	; 61
  7c:	de b7       	in	r29, 0x3e	; 62
	 	 * USBS -> Stop bit select.--init--
	 	 * UCSZ2:1 -> Helps choosing the number of data bits in your frame .. standard 8-bit 3 (Initial Value is 3 by default).--init--.
	 * UBRRL - UBRRH -> set baud rate.--init--.
	 	 * URSEL -> must be set to zero when writing UBRRH.
	 */
	SET_BIT(UCSRC, URSEL);
  7e:	a0 e4       	ldi	r26, 0x40	; 64
  80:	b0 e0       	ldi	r27, 0x00	; 0
  82:	e0 e4       	ldi	r30, 0x40	; 64
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC, UMSEL);//ASYNC Mode.
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	e0 e4       	ldi	r30, 0x40	; 64
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	8c 93       	st	X, r24

	/*
	 * Set BaudRate.
	 */
	CLEAR_BIT(UCSRC, URSEL);
  9a:	a0 e4       	ldi	r26, 0x40	; 64
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	8c 93       	st	X, r24
	UBRRL = UBRR_VALUE;
  a8:	e9 e2       	ldi	r30, 0x29	; 41
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	80 83       	st	Z, r24
	UBRRH = UBRR_VALUE >> 8;
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
}
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <UART_sendByte>:

/*
 * UART sending byte.
 */
void UART_sendByte(const uint8 byte)
{
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	0f 92       	push	r0
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
		 	 * RXCIE -> RX complete interrupt enable.
		 	 * TXCIE -> TX complete interrupt enable.
		 	 * RXEN  -> Receiver Enable.
		 	 * TXEN  -> Transmitter Enable. --sendByte--.
	*/
	SET_BIT(UCSRB, TXEN);
  c8:	aa e2       	ldi	r26, 0x2A	; 42
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	ea e2       	ldi	r30, 0x2A	; 42
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	8c 93       	st	X, r24
	UDR = byte;
  d6:	ec e2       	ldi	r30, 0x2C	; 44
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR(UCSRA, TXC) );//Polling Operation.
  de:	eb e2       	ldi	r30, 0x2B	; 43
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 2f       	mov	r24, r24
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	80 74       	andi	r24, 0x40	; 64
  ea:	90 70       	andi	r25, 0x00	; 0
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	b9 f3       	breq	.-18     	; 0xde <UART_sendByte+0x22>
	SET_BIT(UCSRA, TXC);//Reset TXC bit.
  f0:	ab e2       	ldi	r26, 0x2B	; 43
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	eb e2       	ldi	r30, 0x2B	; 43
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	8c 93       	st	X, r24
}
  fe:	0f 90       	pop	r0
 100:	cf 91       	pop	r28
 102:	df 91       	pop	r29
 104:	08 95       	ret

00000106 <UART_receiveByte>:

/*
 * UART receive byte.
 */
uint8 UART_receiveByte()
{
 106:	df 93       	push	r29
 108:	cf 93       	push	r28
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
			 * RXCIE -> RX complete interrupt enable.
			 * TXCIE -> TX complete interrupt enable.
			 * RXEN  -> Receiver Enable.--receiveByte--.
			 * TXEN  -> Transmitter Enable. --sendByte--.
	*/
	SET_BIT(UCSRB, RXEN);
 10e:	aa e2       	ldi	r26, 0x2A	; 42
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ea e2       	ldi	r30, 0x2A	; 42
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 61       	ori	r24, 0x10	; 16
 11a:	8c 93       	st	X, r24
	while( BIT_IS_CLEAR(UCSRA , RXC) );
 11c:	eb e2       	ldi	r30, 0x2B	; 43
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	dc f7       	brge	.-10     	; 0x11c <UART_receiveByte+0x16>
	//RXC Cleared by CPU when no data in data-in buffer.
	return UDR;
 126:	ec e2       	ldi	r30, 0x2C	; 44
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
}
 12c:	cf 91       	pop	r28
 12e:	df 91       	pop	r29
 130:	08 95       	ret

00000132 <UART_sendString>:

/*
 * UART sendString.
 */
void UART_sendString(uint8* string)
{
 132:	df 93       	push	r29
 134:	cf 93       	push	r28
 136:	00 d0       	rcall	.+0      	; 0x138 <UART_sendString+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <UART_sendString+0x8>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	9c 83       	std	Y+4, r25	; 0x04
 140:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 * To send string and understandable by the receiver .. first byte will have the number of bytes coming from transmitter.
	 */
	uint8 length = strlen( (const char*)string );
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	9c 81       	ldd	r25, Y+4	; 0x04
 146:	0e 94 fe 00 	call	0x1fc	; 0x1fc <strlen>
 14a:	8a 83       	std	Y+2, r24	; 0x02

	/*
	 * Sending length of string first.
	 */
	UART_sendByte(length);
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendByte>
	/*
	 * Then sending byte byte to receiver.
	 */
	uint8 i = 0;
 152:	19 82       	std	Y+1, r1	; 0x01
 154:	0e c0       	rjmp	.+28     	; 0x172 <UART_sendString+0x40>
	while( *(string + i) != '\0' )
	{
		UART_sendByte( *(string + i) );
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	9c 81       	ldd	r25, Y+4	; 0x04
 160:	fc 01       	movw	r30, r24
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 81       	ld	r24, Z
 168:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_sendByte>
		i++;
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(length);
	/*
	 * Then sending byte byte to receiver.
	 */
	uint8 i = 0;
	while( *(string + i) != '\0' )
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	9c 81       	ldd	r25, Y+4	; 0x04
 17c:	fc 01       	movw	r30, r24
 17e:	e2 0f       	add	r30, r18
 180:	f3 1f       	adc	r31, r19
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	39 f7       	brne	.-50     	; 0x156 <UART_sendString+0x24>
	{
		UART_sendByte( *(string + i) );
		i++;
	}
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <UART_receiveString>:

/*
 * UART receive string.
 */
uint8* UART_receiveString()
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	df 93       	push	r29
 19c:	cf 93       	push	r28
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <UART_receiveString+0xa>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <UART_receiveString+0xc>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	uint8* string;
	uint8 i = 0;
 1a6:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * First coming byte is the length of string.
	 */
	uint8 length = UART_receiveByte();
 1a8:	0e 94 83 00 	call	0x106	; 0x106 <UART_receiveByte>
 1ac:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Loop to get all string.
	 */
	do
	{
		*(string + i) = UART_receiveByte();
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	8c 01       	movw	r16, r24
 1ba:	02 0f       	add	r16, r18
 1bc:	13 1f       	adc	r17, r19
 1be:	0e 94 83 00 	call	0x106	; 0x106 <UART_receiveByte>
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 83       	st	Z, r24
		i++;
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	8a 83       	std	Y+2, r24	; 0x02
	}while( i < length );
 1cc:	9a 81       	ldd	r25, Y+2	; 0x02
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	98 17       	cp	r25, r24
 1d2:	68 f3       	brcs	.-38     	; 0x1ae <UART_receiveString+0x18>
	//Put Null Operator.
	*(string + i) = '\0';
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	fc 01       	movw	r30, r24
 1e0:	e2 0f       	add	r30, r18
 1e2:	f3 1f       	adc	r31, r19
 1e4:	10 82       	st	Z, r1
	return string;
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	9c 81       	ldd	r25, Y+4	; 0x04
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <strlen>:
 1fc:	fc 01       	movw	r30, r24
 1fe:	01 90       	ld	r0, Z+
 200:	00 20       	and	r0, r0
 202:	e9 f7       	brne	.-6      	; 0x1fe <strlen+0x2>
 204:	80 95       	com	r24
 206:	90 95       	com	r25
 208:	8e 0f       	add	r24, r30
 20a:	9f 1f       	adc	r25, r31
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
