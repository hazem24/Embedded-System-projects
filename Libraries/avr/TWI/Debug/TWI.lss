
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a68  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000924  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  64:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_init>:

/*
 * EEPROM init.
 */
void EEPROM_init()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
  74:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_init>
}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

0000007e <EEPROM_writeData>:

/*
 * EEPROM writeData.
 */
void EEPROM_writeData( uint8 data, uint16 address )
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	00 d0       	rcall	.+0      	; 0x84 <EEPROM_writeData+0x6>
  84:	00 d0       	rcall	.+0      	; 0x86 <EEPROM_writeData+0x8>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	7c 83       	std	Y+4, r23	; 0x04
  8e:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
  90:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <TWI_start>
	/*
	 * 1010(A10)(A9)(A8)(0)
	 */
	uint8 most_address_bit = (((( address ) & 0x700) >> 7));
  94:	8b 81       	ldd	r24, Y+3	; 0x03
  96:	9c 81       	ldd	r25, Y+4	; 0x04
  98:	80 70       	andi	r24, 0x00	; 0
  9a:	97 70       	andi	r25, 0x07	; 7
  9c:	88 0f       	add	r24, r24
  9e:	89 2f       	mov	r24, r25
  a0:	88 1f       	adc	r24, r24
  a2:	99 0b       	sbc	r25, r25
  a4:	91 95       	neg	r25
  a6:	89 83       	std	Y+1, r24	; 0x01
	TWI_write( CONTROL_CODE | most_address_bit );
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	80 6a       	ori	r24, 0xA0	; 160
  ac:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_write>

	if (TWI_getStatus() == SLA_WRITE_ACK)
  b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <TWI_getStatus>
  b4:	88 31       	cpi	r24, 0x18	; 24
  b6:	51 f4       	brne	.+20     	; 0xcc <EEPROM_writeData+0x4e>
	{
		/* Write Address (8-LSB) */
		TWI_write( address );
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_write>
		if (TWI_getStatus() == SLA_WRITE_ACK)
  be:	0e 94 67 01 	call	0x2ce	; 0x2ce <TWI_getStatus>
  c2:	88 31       	cpi	r24, 0x18	; 24
  c4:	19 f4       	brne	.+6      	; 0xcc <EEPROM_writeData+0x4e>
		{
			TWI_write( data );
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_write>
		}
	}
	TWI_stop();
  cc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <TWI_stop>
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <EEPROM_readData>:

/*
 * EEPROM readData
 */
void EEPROM_readData( uint16 address , uint8* data)
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	00 d0       	rcall	.+0      	; 0xe4 <EEPROM_readData+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <EEPROM_readData+0x8>
  e6:	0f 92       	push	r0
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	9b 83       	std	Y+3, r25	; 0x03
  ee:	8a 83       	std	Y+2, r24	; 0x02
  f0:	7d 83       	std	Y+5, r23	; 0x05
  f2:	6c 83       	std	Y+4, r22	; 0x04
	TWI_start();
  f4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <TWI_start>
	/*
	 * 1010(A10)(A9)(A8)(1)
	 */
	uint8 most_address_bit = (((( address ) & 0x700) >> 7));
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	9b 81       	ldd	r25, Y+3	; 0x03
  fc:	80 70       	andi	r24, 0x00	; 0
  fe:	97 70       	andi	r25, 0x07	; 7
 100:	88 0f       	add	r24, r24
 102:	89 2f       	mov	r24, r25
 104:	88 1f       	adc	r24, r24
 106:	99 0b       	sbc	r25, r25
 108:	91 95       	neg	r25
 10a:	89 83       	std	Y+1, r24	; 0x01
	data = False;
 10c:	1d 82       	std	Y+5, r1	; 0x05
 10e:	1c 82       	std	Y+4, r1	; 0x04
	TWI_write( CONTROL_CODE | most_address_bit | 1 );
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	81 6a       	ori	r24, 0xA1	; 161
 114:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_write>

	if (TWI_getStatus() == SLA_WRITE_ACK)
 118:	0e 94 67 01 	call	0x2ce	; 0x2ce <TWI_getStatus>
 11c:	88 31       	cpi	r24, 0x18	; 24
 11e:	61 f4       	brne	.+24     	; 0x138 <EEPROM_readData+0x5a>
	{
		/* Write Address (8-LSB) */
		TWI_write( address );
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_write>
		if (TWI_getStatus() == SLA_READ_ACK)
 126:	0e 94 67 01 	call	0x2ce	; 0x2ce <TWI_getStatus>
 12a:	80 34       	cpi	r24, 0x40	; 64
 12c:	29 f4       	brne	.+10     	; 0x138 <EEPROM_readData+0x5a>
		{
			*data = TWI_read_with_ack();
 12e:	0e 94 27 01 	call	0x24e	; 0x24e <TWI_read_with_ack>
 132:	ec 81       	ldd	r30, Y+4	; 0x04
 134:	fd 81       	ldd	r31, Y+5	; 0x05
 136:	80 83       	st	Z, r24
		}
	}
	TWI_stop();
 138:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <TWI_stop>
}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

0000014c <main>:
#include "common_macros.h"
#include "eeprom.h"


int main()
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	0f 92       	push	r0
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Init.
	 */
	EEPROM_init();
 156:	0e 94 36 00 	call	0x6c	; 0x6c <EEPROM_init>

	EEPROM_writeData(0x08, 0xA1);
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	61 ea       	ldi	r22, 0xA1	; 161
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 3f 00 	call	0x7e	; 0x7e <EEPROM_writeData>



	uint8 data;

	EEPROM_readData(0xA1, &data);
 164:	81 ea       	ldi	r24, 0xA1	; 161
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	9e 01       	movw	r18, r28
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	b9 01       	movw	r22, r18
 170:	0e 94 6f 00 	call	0xde	; 0xde <EEPROM_readData>
	DDRA = 0xFF;
 174:	ea e3       	ldi	r30, 0x3A	; 58
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	80 83       	st	Z, r24
	PORTA = data;
 17c:	eb e3       	ldi	r30, 0x3B	; 59
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	80 83       	st	Z, r24
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x38>

00000186 <TWI_init>:

#include "twi.h"


void TWI_init()
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	 * TWDR -> In transmit mode, TWDR contains the next byte to be transmitted, in receive mode, the TWDR contains the last byte received.
	 * TWAR.
	 	 *bit from 7 .. 1  -> Slave address register.--init--.--DONE--.
	 */
#if MODE == 1
	TWBR  = TWBR_VALUE;
 18e:	e0 e2       	ldi	r30, 0x20	; 32
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	80 83       	st	Z, r24
	TWSR |= TWPS_VALUE;
 196:	a1 e2       	ldi	r26, 0x21	; 33
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e1 e2       	ldi	r30, 0x21	; 33
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	8c 93       	st	X, r24
#endif
	TWAR |= ( DEVICE_ADDRESS << 1);
 1a4:	a2 e2       	ldi	r26, 0x22	; 34
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e2 e2       	ldi	r30, 0x22	; 34
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 6a       	ori	r24, 0xA0	; 160
 1b0:	8c 93       	st	X, r24
	TWCR  = ( 1 << TWEN );
 1b2:	e6 e5       	ldi	r30, 0x56	; 86
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	80 83       	st	Z, r24
}
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <TWI_start>:

/*
 * TWI start bit.
 */
void TWI_start()
{
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWCR -> TWI Control Register.
	 	 * TWSTA -> TWI Start Condition bit.--DONE--.
	 */
	TWCR |= ( 1 << TWSTA );
 1c8:	a6 e5       	ldi	r26, 0x56	; 86
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	e6 e5       	ldi	r30, 0x56	; 86
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	8c 93       	st	X, r24
}
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <TWI_repeatedStart>:

/*
 * TWI repeated start.
 */
void TWI_repeatedStart()
{
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	TWCR |= ( 1 << TWSTA );
 1e4:	a6 e5       	ldi	r26, 0x56	; 86
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e6 e5       	ldi	r30, 0x56	; 86
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	8c 93       	st	X, r24
}
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <TWI_stop>:
/*
 * TWI stop bit.
 */
void TWI_stop()
{
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWCR -> TWI Control Register.
	 	 * TWSTO -> Write one to this bit in Master Mode will generate stop bit.--DONE--.
	 */
	TWCR |= ( 1 << TWSTO);
 200:	a6 e5       	ldi	r26, 0x56	; 86
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e6 e5       	ldi	r30, 0x56	; 86
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	8c 93       	st	X, r24
}
 20e:	cf 91       	pop	r28
 210:	df 91       	pop	r29
 212:	08 95       	ret

00000214 <TWI_write>:

/*
 * TWI write.
 */
void TWI_write( uint8 data )
{
 214:	df 93       	push	r29
 216:	cf 93       	push	r28
 218:	0f 92       	push	r0
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	89 83       	std	Y+1, r24	; 0x01
	 * TWDR -> In transmit mode, TWDR contains the next byte to be transmitted, in receive mode, the TWDR contains the last byte received.--DONE--.
	 * TWCR -> TWI Control Register.
	 	 * TWINT -> This bit is set by hardware when the TWI has finished it's current job .. ( Cleared By set logic one to it).--DONE--.
	 * I can check here for an error.
	 */
	TWDR = data;
 220:	e3 e2       	ldi	r30, 0x23	; 35
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	80 83       	st	Z, r24
	while(!(TWCR & (~(1 << TWINT))));//TWCR, TWINT
 228:	e6 e5       	ldi	r30, 0x56	; 86
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	8f 77       	andi	r24, 0x7F	; 127
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	c1 f3       	breq	.-16     	; 0x228 <TWI_write+0x14>
	TWCR |= ( 1 << TWINT);
 238:	a6 e5       	ldi	r26, 0x56	; 86
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e6 e5       	ldi	r30, 0x56	; 86
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 68       	ori	r24, 0x80	; 128
 244:	8c 93       	st	X, r24
}
 246:	0f 90       	pop	r0
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	08 95       	ret

0000024e <TWI_read_with_ack>:

/*
 * TWI_read_with_ack.
 */
uint8 TWI_read_with_ack()
{
 24e:	df 93       	push	r29
 250:	cf 93       	push	r28
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
	TWCR  |= ( 1 << TWEA );
 256:	a6 e5       	ldi	r26, 0x56	; 86
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e6 e5       	ldi	r30, 0x56	; 86
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8c 93       	st	X, r24
	while(!(TWCR & (~(1 << TWINT))));
 264:	e6 e5       	ldi	r30, 0x56	; 86
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	8f 77       	andi	r24, 0x7F	; 127
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	c1 f3       	breq	.-16     	; 0x264 <TWI_read_with_ack+0x16>
	TWCR |= ( 1 << TWINT);
 274:	a6 e5       	ldi	r26, 0x56	; 86
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	e6 e5       	ldi	r30, 0x56	; 86
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	8c 93       	st	X, r24
	return TWDR;
 282:	e3 e2       	ldi	r30, 0x23	; 35
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
}
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	08 95       	ret

0000028e <TWI_read_with_nack>:

/*
 * TWI_read_with_nack.
 */
uint8 TWI_read_with_nack()
{
 28e:	df 93       	push	r29
 290:	cf 93       	push	r28
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
	TWCR = TWCR & (~( 1 << TWINT ));
 296:	a6 e5       	ldi	r26, 0x56	; 86
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e6 e5       	ldi	r30, 0x56	; 86
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8f 77       	andi	r24, 0x7F	; 127
 2a2:	8c 93       	st	X, r24
	while(!(TWCR & (~(1 << TWINT))));
 2a4:	e6 e5       	ldi	r30, 0x56	; 86
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	88 2f       	mov	r24, r24
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	8f 77       	andi	r24, 0x7F	; 127
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	c1 f3       	breq	.-16     	; 0x2a4 <TWI_read_with_nack+0x16>
	TWCR |= ( 1 << TWINT);
 2b4:	a6 e5       	ldi	r26, 0x56	; 86
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e6 e5       	ldi	r30, 0x56	; 86
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	8c 93       	st	X, r24
	return TWDR;
 2c2:	e3 e2       	ldi	r30, 0x23	; 35
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
}
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <TWI_getStatus>:

/*
 * TWI get status.
 */
uint8 TWI_getStatus()
{
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWSR -> TWI Status Register.
	 	 * TWI Status from bit 7 .. 3 -> these five bits reflect the status of the TWI logic and the Two-wire serial bus.
	 */
	return TWSR & 0xF8;
 2d6:	e1 e2       	ldi	r30, 0x21	; 33
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	88 7f       	andi	r24, 0xF8	; 248

}
 2de:	cf 91       	pop	r28
 2e0:	df 91       	pop	r29
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
